<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/nhathuy/randomlucky/MainActivity.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/nhathuy/randomlucky/MainActivity.kt" />
              <option name="originalContent" value="package com.nhathuy.randomlucky&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.core.view.WindowCompat&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import com.nhathuy.randomlucky.presentation.theme.RandomLuckyTheme&#10;import com.nhathuy.randomlucky.presentation.ui.screen.DetailLotteryScreen&#10;import com.nhathuy.randomlucky.presentation.ui.screen.HistoryScreen&#10;import com.nhathuy.randomlucky.presentation.ui.screen.LotteryScreen&#10;import com.nhathuy.randomlucky.presentation.ui.screen.SettingsScreen&#10;import dagger.hilt.android.AndroidEntryPoint&#10;&#10;@AndroidEntryPoint&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        WindowCompat.setDecorFitsSystemWindows(window, false)&#10;&#10;        setContent {&#10;            RandomLuckyTheme {&#10;                RandomLuckyApp()&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun RandomLuckyApp(){&#10;    val navController = rememberNavController()&#10;&#10;    NavHost(&#10;        navController = navController,&#10;        startDestination = &quot;lottery&quot;&#10;    ){&#10;        composable(&quot;lottery&quot;) {&#10;            LotteryScreen(&#10;                onNavigateToHistory = { navController.navigate(&quot;history&quot;) },&#10;                onNavigateToSettings = { navController.navigate(&quot;settings&quot;) }&#10;            )&#10;        }&#10;        composable(&quot;history&quot;) {&#10;            HistoryScreen(&#10;                onNavigateBack = {navController.popBackStack()},&#10;                onNavigateToDetail = { sessionId -&gt;&#10;                    navController.navigate(&quot;detail/$sessionId&quot;)&#10;                }&#10;            )&#10;        }&#10;        composable(&quot;settings&quot;) {&#10;            SettingsScreen(onNavigateBack = {navController.popBackStack()})&#10;        }&#10;&#10;        composable(&quot;detail/{sessionId}&quot;) { backStackEntry -&gt;&#10;            val sessionId = backStackEntry.arguments?.getString(&quot;sessionId&quot;) ?: &quot;&quot;&#10;            DetailLotteryScreen(&#10;                sessionId = sessionId,&#10;                onNavigateBack = {navController.popBackStack()}&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;&#10;&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun GreetingPreview() {&#10;    RandomLuckyTheme {&#10;        RandomLuckyApp()&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.nhathuy.randomlucky&#10;&#10;import android.os.Bundle&#10;import androidx.activity.ComponentActivity&#10;import androidx.activity.compose.setContent&#10;import androidx.activity.enableEdgeToEdge&#10;import androidx.compose.runtime.Composable&#10;import androidx.compose.ui.tooling.preview.Preview&#10;import androidx.core.view.WindowCompat&#10;import androidx.navigation.compose.NavHost&#10;import androidx.navigation.compose.composable&#10;import androidx.navigation.compose.rememberNavController&#10;import com.nhathuy.randomlucky.presentation.theme.RandomLuckyTheme&#10;import com.nhathuy.randomlucky.presentation.ui.screen.DetailLotteryScreen&#10;import com.nhathuy.randomlucky.presentation.ui.screen.HistoryScreen&#10;import com.nhathuy.randomlucky.presentation.ui.screen.LotteryScreen&#10;import com.nhathuy.randomlucky.presentation.ui.screen.SettingsScreen&#10;import dagger.hilt.android.AndroidEntryPoint&#10;&#10;@AndroidEntryPoint&#10;class MainActivity : ComponentActivity() {&#10;    override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        enableEdgeToEdge()&#10;        WindowCompat.setDecorFitsSystemWindows(window, false)&#10;&#10;        setContent {&#10;            RandomLuckyTheme {&#10;                RandomLuckyApp()&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;fun RandomLuckyApp(){&#10;    val navController = rememberNavController()&#10;&#10;    NavHost(&#10;        navController = navController,&#10;        startDestination = &quot;lottery&quot;&#10;    ){&#10;        composable(&quot;lottery&quot;) { backStackEntry -&gt;&#10;            // Check if we're returning from history screen with reset signal&#10;            val shouldReset = backStackEntry.savedStateHandle.get&lt;Boolean&gt;(&quot;reset_lottery&quot;) ?: false&#10;            &#10;            LotteryScreen(&#10;                onNavigateToHistory = { navController.navigate(&quot;history&quot;) },&#10;                onNavigateToSettings = { navController.navigate(&quot;settings&quot;) },&#10;                shouldReset = shouldReset,&#10;                onResetHandled = {&#10;                    backStackEntry.savedStateHandle.remove&lt;Boolean&gt;(&quot;reset_lottery&quot;)&#10;                }&#10;            )&#10;        }&#10;        composable(&quot;history&quot;) {&#10;            HistoryScreen(&#10;                onNavigateBack = { wasHistoryCleared -&gt;&#10;                    // Only set reset signal if history was actually cleared&#10;                    if (wasHistoryCleared) {&#10;                        navController.previousBackStackEntry&#10;                            ?.savedStateHandle&#10;                            ?.set(&quot;reset_lottery&quot;, true)&#10;                        println(&quot;DEBUG: History was cleared, setting reset signal&quot;)&#10;                    } else {&#10;                        println(&quot;DEBUG: History not cleared, no reset needed&quot;)&#10;                    }&#10;                    navController.popBackStack()&#10;                },&#10;                onNavigateToDetail = { sessionId -&gt;&#10;                    navController.navigate(&quot;detail/$sessionId&quot;)&#10;                }&#10;            )&#10;        }&#10;        composable(&quot;settings&quot;) {&#10;            SettingsScreen(onNavigateBack = {navController.popBackStack()})&#10;        }&#10;&#10;        composable(&quot;detail/{sessionId}&quot;) { backStackEntry -&gt;&#10;            val sessionId = backStackEntry.arguments?.getString(&quot;sessionId&quot;) ?: &quot;&quot;&#10;            DetailLotteryScreen(&#10;                sessionId = sessionId,&#10;                onNavigateBack = {navController.popBackStack()}&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;&#10;@Preview(showBackground = true)&#10;@Composable&#10;fun GreetingPreview() {&#10;    RandomLuckyTheme {&#10;        RandomLuckyApp()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/nhathuy/randomlucky/presentation/ui/screen/HistoryScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/nhathuy/randomlucky/presentation/ui/screen/HistoryScreen.kt" />
              <option name="originalContent" value="package com.nhathuy.randomlucky.presentation.ui.screen&#10;&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.fadeIn&#10;import androidx.compose.animation.fadeOut&#10;import androidx.compose.animation.slideInVertically&#10;import androidx.compose.animation.slideOutVertically&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Clear&#10;import androidx.compose.material.icons.filled.DeleteSweep&#10;import androidx.compose.material.icons.filled.Refresh&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.nhathuy.randomlucky.domain.model.LotterySession&#10;import com.nhathuy.randomlucky.presentation.theme.LotteryGold&#10;import com.nhathuy.randomlucky.presentation.ui.components.LotteryHistoryCard&#10;import com.nhathuy.randomlucky.presentation.ui.components.LotteryResultsBoard&#10;import com.nhathuy.randomlucky.presentation.viewmodel.HistoryViewModel&#10;import kotlinx.coroutines.delay&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun HistoryScreen(&#10;    viewModel: HistoryViewModel = hiltViewModel(),&#10;    onNavigateBack: () -&gt; Unit = {},&#10;    onNavigateToDetail: (String) -&gt; Unit = {}&#10;) {&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;    var showClearAllDialog by remember { mutableStateOf(false) }&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;&#10;    LaunchedEffect(searchQuery) {&#10;        viewModel.searchSessions(searchQuery)&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(&#10;                brush = Brush.verticalGradient(&#10;                    colors = listOf(&#10;                        Color(0xFF0F0F23),&#10;                        Color(0xFF1A1A2E),&#10;                        Color(0xFF16213E)&#10;                    )&#10;                )&#10;            )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;        ) {&#10;            // Header&#10;            TopAppBar(&#10;                title = {&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        Spacer(modifier = Modifier.width(5.dp))&#10;                        Text(&#10;                            text = &quot;Lịch sử xổ số&quot;,&#10;                            fontSize = 20.sp,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = Color.White&#10;                        )&#10;                    }&#10;                },&#10;                navigationIcon = {&#10;                    IconButton(&#10;                        onClick = onNavigateBack,&#10;                        modifier = Modifier&#10;                            .clip(RoundedCornerShape(8.dp))&#10;                            .background(Color.White.copy(alpha = 0.1f))&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.ArrowBack,&#10;                            contentDescription = &quot;Quay lại&quot;,&#10;                            tint = Color.White,&#10;                            modifier = Modifier.size(16.dp)&#10;                        )&#10;                    }&#10;                },&#10;                actions = {&#10;                    if (uiState.hasResults) {&#10;                        IconButton(&#10;                            onClick = { showClearAllDialog = true },&#10;                            modifier = Modifier&#10;                                .clip(RoundedCornerShape(8.dp))&#10;                                .background(Color.White.copy(alpha = 0.1f))&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.DeleteSweep,&#10;                                contentDescription = &quot;Xóa tất cả&quot;,&#10;                                tint = Color.White,&#10;                                modifier = Modifier.size(16.dp)&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.width(10.dp))&#10;&#10;                    IconButton(&#10;                        onClick = { viewModel.loadHistory() },&#10;                        modifier = Modifier&#10;                            .clip(RoundedCornerShape(8.dp))&#10;                            .background(Color.White.copy(alpha = 0.1f))&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Refresh,&#10;                            contentDescription = &quot;Làm mới&quot;,&#10;                            tint = Color.White,&#10;                            modifier = Modifier.size(16.dp)&#10;                        )&#10;                    }&#10;&#10;                },&#10;                colors = TopAppBarDefaults.topAppBarColors(&#10;                    containerColor = Color.Transparent&#10;                ),&#10;                modifier = Modifier.padding(horizontal = 8.dp, vertical = 8.dp)&#10;            )&#10;&#10;&#10;            // Search bar&#10;            if (uiState.hasResults) {&#10;                OutlinedTextField(&#10;                    value = searchQuery,&#10;                    onValueChange = { searchQuery = it },&#10;                    modifier = Modifier.fillMaxWidth().padding(16.dp),&#10;                    placeholder = {&#10;                        Text(&#10;                            text = &quot;Tìm kiếm theo mã xổ số hoặc số&quot;,&#10;                            color = Color.White.copy(alpha = 0.6f)&#10;                        )&#10;                    },&#10;                    leadingIcon = {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Search,&#10;                            contentDescription = null,&#10;                            tint = Color.White.copy(alpha = 0.6f)&#10;                        )&#10;                    },&#10;                    trailingIcon = {&#10;                        if (searchQuery.isNotEmpty()) {&#10;                            IconButton(onClick = { searchQuery = &quot;&quot; }) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Clear,&#10;                                    contentDescription = &quot;Xóa&quot;,&#10;                                    tint = Color.White.copy(alpha = 0.6f)&#10;                                )&#10;                            }&#10;                        }&#10;                    },&#10;                    colors = OutlinedTextFieldDefaults.colors(&#10;                        focusedTextColor = Color.White,&#10;                        unfocusedTextColor = Color.White,&#10;                        focusedBorderColor = LotteryGold,&#10;                        unfocusedBorderColor = Color.White.copy(alpha = 0.3f)&#10;                    ),&#10;                    shape = RoundedCornerShape(12.dp),&#10;                    singleLine = true&#10;                )&#10;&#10;            }&#10;&#10;            // Content&#10;            when {&#10;                uiState.isLoading -&gt; {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally,&#10;                            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;                        ) {&#10;                            CircularProgressIndicator(&#10;                                color = LotteryGold,&#10;                                modifier = Modifier.size(48.dp)&#10;                            )&#10;                            Text(&#10;                                text = &quot;Đang tải lịch sử...&quot;,&#10;                                color = Color.White.copy(alpha = 0.7f),&#10;                                fontSize = 16.sp&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                uiState.isEmpty -&gt; {&#10;                    EmptyHistoryState(&#10;                        onRefresh = { viewModel.loadHistory() }&#10;                    )&#10;                }&#10;&#10;                else -&gt; {&#10;                    LazyColumn(&#10;                        verticalArrangement = Arrangement.spacedBy(12.dp),&#10;                        modifier = Modifier.fillMaxSize().padding(16.dp)&#10;                    ) {&#10;                        // Statistics card&#10;                        item {&#10;                            Card(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                shape = RoundedCornerShape(12.dp),&#10;                                colors = CardDefaults.cardColors(&#10;                                    containerColor = Color.White.copy(alpha = 0.1f)&#10;                                )&#10;                            ) {&#10;                                Row(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .padding(16.dp),&#10;                                    horizontalArrangement = Arrangement.SpaceEvenly&#10;                                ) {&#10;                                    StatItem(&#10;                                        title = &quot;Tổng phiên&quot;,&#10;                                        value = uiState.filteredSessions.size.toString()&#10;                                    )&#10;                                    StatItem(&#10;                                        title = &quot;Hoàn tất&quot;,&#10;                                        value = uiState.filteredSessions.count { it.isCompleted }.toString()&#10;                                    )&#10;                                    StatItem(&#10;                                        title = &quot;Tổng giải&quot;,&#10;                                        value = uiState.filteredSessions.sumOf { it.results.size }.toString()&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;&#10;                        // Sessions list&#10;                        items(&#10;                            items = uiState.filteredSessions,&#10;                            key = { it.id }&#10;                        ) { session -&gt;&#10;                            AnimatedVisibility(&#10;                                visible = true,&#10;                                enter = slideInVertically() + fadeIn(),&#10;                                exit = slideOutVertically() + fadeOut()&#10;                            ) {&#10;                                LotteryHistoryCard(&#10;                                    session = session,&#10;                                    onClick = {  onNavigateToDetail(session.id) },&#10;                                    onDelete = { viewModel.deleteSession(session.id) }&#10;                                )&#10;                            }&#10;                        }&#10;&#10;                        // Bottom spacing&#10;                        item {&#10;                            Spacer(modifier = Modifier.height(80.dp))&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Error handling&#10;        uiState.error?.let { error -&gt;&#10;            LaunchedEffect(error) {&#10;                delay(3000)&#10;                viewModel.clearError()&#10;            }&#10;        }&#10;&#10;//        // Session detail dialog&#10;//        if (uiState.showSessionDetail &amp;&amp; uiState.selectedSession != null) {&#10;////            SessionDetailDialog(&#10;////                session = uiState.selectedSession!!,&#10;////                onDismiss = { viewModel.hideSessionDetail() }&#10;////            )&#10;//        }&#10;&#10;        // Clear all confirmation dialog&#10;        if (showClearAllDialog) {&#10;            AlertDialog(&#10;                onDismissRequest = { showClearAllDialog = false },&#10;                title = {&#10;                    Text(&quot;Xóa tất cả lịch sử&quot;)&#10;                },&#10;                text = {&#10;                    Text(&quot;Bạn có chắc chắn muốn xóa toàn bộ lịch sử? Hành động này không thể hoàn tác.&quot;)&#10;                },&#10;                confirmButton = {&#10;                    TextButton(&#10;                        onClick = {&#10;                            viewModel.clearAllHistory()&#10;                            showClearAllDialog = false&#10;                        }&#10;                    ) {&#10;                        Text(&quot;Xóa tất cả&quot;, color = MaterialTheme.colorScheme.error)&#10;                    }&#10;                },&#10;                dismissButton = {&#10;                    TextButton(&#10;                        onClick = { showClearAllDialog = false }&#10;                    ) {&#10;                        Text(&quot;Hủy&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun EmptyHistoryState(&#10;    onRefresh: () -&gt; Unit&#10;) {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;&quot;,&#10;                fontSize = 64.sp&#10;            )&#10;            Text(&#10;                text = &quot;Chưa có lịch sử&quot;,&#10;                fontSize = 20.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.White&#10;            )&#10;&#10;            Text(&#10;                text = &quot;Các phiên quay số sẽ được lưu tại đây&quot;,&#10;                fontSize = 14.sp,&#10;                color = Color.White.copy(alpha = 0.7f),&#10;                textAlign = TextAlign.Center&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Button(&#10;                onClick = onRefresh,&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = LotteryGold&#10;                )&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Refresh,&#10;                    contentDescription = null&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&#10;                    text = &quot;Làm mới&quot;,&#10;                    color = Color.Black,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun StatItem(&#10;    title: String,&#10;    value: String&#10;) {&#10;    Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;        Text(&#10;            text = value,&#10;            fontSize = 20.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            color = LotteryGold&#10;        )&#10;        Text(&#10;            text = title,&#10;            fontSize = 12.sp,&#10;            color = Color.White.copy(alpha = 0.7f)&#10;        )&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.nhathuy.randomlucky.presentation.ui.screen&#10;&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.fadeIn&#10;import androidx.compose.animation.fadeOut&#10;import androidx.compose.animation.slideInVertically&#10;import androidx.compose.animation.slideOutVertically&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.Arrangement&#10;import androidx.compose.foundation.layout.Box&#10;import androidx.compose.foundation.layout.Column&#10;import androidx.compose.foundation.layout.Row&#10;import androidx.compose.foundation.layout.Spacer&#10;import androidx.compose.foundation.layout.fillMaxSize&#10;import androidx.compose.foundation.layout.fillMaxWidth&#10;import androidx.compose.foundation.layout.height&#10;import androidx.compose.foundation.layout.padding&#10;import androidx.compose.foundation.layout.size&#10;import androidx.compose.foundation.layout.width&#10;import androidx.compose.foundation.lazy.LazyColumn&#10;import androidx.compose.foundation.lazy.items&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.ArrowBack&#10;import androidx.compose.material.icons.filled.Clear&#10;import androidx.compose.material.icons.filled.DeleteSweep&#10;import androidx.compose.material.icons.filled.Refresh&#10;import androidx.compose.material.icons.filled.Search&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.nhathuy.randomlucky.domain.model.LotterySession&#10;import com.nhathuy.randomlucky.presentation.theme.LotteryGold&#10;import com.nhathuy.randomlucky.presentation.ui.components.LotteryHistoryCard&#10;import com.nhathuy.randomlucky.presentation.ui.components.LotteryResultsBoard&#10;import com.nhathuy.randomlucky.presentation.viewmodel.HistoryViewModel&#10;import kotlinx.coroutines.delay&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun HistoryScreen(&#10;    viewModel: HistoryViewModel = hiltViewModel(),&#10;    onNavigateBack: (Boolean) -&gt; Unit = { _ -&gt; }, // ✅ Modified to include wasHistoryCleared parameter&#10;    onNavigateToDetail: (String) -&gt; Unit = {}&#10;) {&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;    var showClearAllDialog by remember { mutableStateOf(false) }&#10;    var searchQuery by remember { mutableStateOf(&quot;&quot;) }&#10;    var wasHistoryCleared by remember { mutableStateOf(false) } // ✅ Track if history was cleared&#10;&#10;    LaunchedEffect(searchQuery) {&#10;        viewModel.searchSessions(searchQuery)&#10;    }&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(&#10;                brush = Brush.verticalGradient(&#10;                    colors = listOf(&#10;                        Color(0xFF0F0F23),&#10;                        Color(0xFF1A1A2E),&#10;                        Color(0xFF16213E)&#10;                    )&#10;                )&#10;            )&#10;    ) {&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;        ) {&#10;            // Header&#10;            TopAppBar(&#10;                title = {&#10;                    Row(&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                    ) {&#10;                        Spacer(modifier = Modifier.width(5.dp))&#10;                        Text(&#10;                            text = &quot;Lịch sử xổ số&quot;,&#10;                            fontSize = 20.sp,&#10;                            fontWeight = FontWeight.Bold,&#10;                            color = Color.White&#10;                        )&#10;                    }&#10;                },&#10;                navigationIcon = {&#10;                    IconButton(&#10;                        onClick = { &#10;                            onNavigateBack(wasHistoryCleared) // ✅ Pass the cleared state&#10;                        },&#10;                        modifier = Modifier&#10;                            .clip(RoundedCornerShape(8.dp))&#10;                            .background(Color.White.copy(alpha = 0.1f))&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.ArrowBack,&#10;                            contentDescription = &quot;Quay lại&quot;,&#10;                            tint = Color.White,&#10;                            modifier = Modifier.size(16.dp)&#10;                        )&#10;                    }&#10;                },&#10;                actions = {&#10;                    if (uiState.hasResults) {&#10;                        IconButton(&#10;                            onClick = { showClearAllDialog = true },&#10;                            modifier = Modifier&#10;                                .clip(RoundedCornerShape(8.dp))&#10;                                .background(Color.White.copy(alpha = 0.1f))&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.DeleteSweep,&#10;                                contentDescription = &quot;Xóa tất cả&quot;,&#10;                                tint = Color.White,&#10;                                modifier = Modifier.size(16.dp)&#10;                            )&#10;                        }&#10;                    }&#10;&#10;                    Spacer(modifier = Modifier.width(10.dp))&#10;&#10;                    IconButton(&#10;                        onClick = { viewModel.loadHistory() },&#10;                        modifier = Modifier&#10;                            .clip(RoundedCornerShape(8.dp))&#10;                            .background(Color.White.copy(alpha = 0.1f))&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Refresh,&#10;                            contentDescription = &quot;Làm mới&quot;,&#10;                            tint = Color.White,&#10;                            modifier = Modifier.size(16.dp)&#10;                        )&#10;                    }&#10;&#10;                },&#10;                colors = TopAppBarDefaults.topAppBarColors(&#10;                    containerColor = Color.Transparent&#10;                ),&#10;                modifier = Modifier.padding(horizontal = 8.dp, vertical = 8.dp)&#10;            )&#10;&#10;&#10;            // Search bar&#10;            if (uiState.hasResults) {&#10;                OutlinedTextField(&#10;                    value = searchQuery,&#10;                    onValueChange = { searchQuery = it },&#10;                    modifier = Modifier.fillMaxWidth().padding(16.dp),&#10;                    placeholder = {&#10;                        Text(&#10;                            text = &quot;Tìm kiếm theo mã xổ số hoặc số&quot;,&#10;                            color = Color.White.copy(alpha = 0.6f)&#10;                        )&#10;                    },&#10;                    leadingIcon = {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Search,&#10;                            contentDescription = null,&#10;                            tint = Color.White.copy(alpha = 0.6f)&#10;                        )&#10;                    },&#10;                    trailingIcon = {&#10;                        if (searchQuery.isNotEmpty()) {&#10;                            IconButton(onClick = { searchQuery = &quot;&quot; }) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Clear,&#10;                                    contentDescription = &quot;Xóa&quot;,&#10;                                    tint = Color.White.copy(alpha = 0.6f)&#10;                                )&#10;                            }&#10;                        }&#10;                    },&#10;                    colors = OutlinedTextFieldDefaults.colors(&#10;                        focusedTextColor = Color.White,&#10;                        unfocusedTextColor = Color.White,&#10;                        focusedBorderColor = LotteryGold,&#10;                        unfocusedBorderColor = Color.White.copy(alpha = 0.3f)&#10;                    ),&#10;                    shape = RoundedCornerShape(12.dp),&#10;                    singleLine = true&#10;                )&#10;&#10;            }&#10;&#10;            // Content&#10;            when {&#10;                uiState.isLoading -&gt; {&#10;                    Box(&#10;                        modifier = Modifier.fillMaxSize(),&#10;                        contentAlignment = Alignment.Center&#10;                    ) {&#10;                        Column(&#10;                            horizontalAlignment = Alignment.CenterHorizontally,&#10;                            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;                        ) {&#10;                            CircularProgressIndicator(&#10;                                color = LotteryGold,&#10;                                modifier = Modifier.size(48.dp)&#10;                            )&#10;                            Text(&#10;                                text = &quot;Đang tải lịch sử...&quot;,&#10;                                color = Color.White.copy(alpha = 0.7f),&#10;                                fontSize = 16.sp&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                uiState.isEmpty -&gt; {&#10;                    EmptyHistoryState(&#10;                        onRefresh = { viewModel.loadHistory() }&#10;                    )&#10;                }&#10;&#10;                else -&gt; {&#10;                    LazyColumn(&#10;                        verticalArrangement = Arrangement.spacedBy(12.dp),&#10;                        modifier = Modifier.fillMaxSize().padding(16.dp)&#10;                    ) {&#10;                        // Statistics card&#10;                        item {&#10;                            Card(&#10;                                modifier = Modifier.fillMaxWidth(),&#10;                                shape = RoundedCornerShape(12.dp),&#10;                                colors = CardDefaults.cardColors(&#10;                                    containerColor = Color.White.copy(alpha = 0.1f)&#10;                                )&#10;                            ) {&#10;                                Row(&#10;                                    modifier = Modifier&#10;                                        .fillMaxWidth()&#10;                                        .padding(16.dp),&#10;                                    horizontalArrangement = Arrangement.SpaceEvenly&#10;                                ) {&#10;                                    StatItem(&#10;                                        title = &quot;Tổng phiên&quot;,&#10;                                        value = uiState.filteredSessions.size.toString()&#10;                                    )&#10;                                    StatItem(&#10;                                        title = &quot;Hoàn tất&quot;,&#10;                                        value = uiState.filteredSessions.count { it.isCompleted }.toString()&#10;                                    )&#10;                                    StatItem(&#10;                                        title = &quot;Tổng giải&quot;,&#10;                                        value = uiState.filteredSessions.sumOf { it.results.size }.toString()&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;&#10;                        // Sessions list&#10;                        items(&#10;                            items = uiState.filteredSessions,&#10;                            key = { it.id }&#10;                        ) { session -&gt;&#10;                            AnimatedVisibility(&#10;                                visible = true,&#10;                                enter = slideInVertically() + fadeIn(),&#10;                                exit = slideOutVertically() + fadeOut()&#10;                            ) {&#10;                                LotteryHistoryCard(&#10;                                    session = session,&#10;                                    onClick = {  onNavigateToDetail(session.id) },&#10;                                    onDelete = { viewModel.deleteSession(session.id) }&#10;                                )&#10;                            }&#10;                        }&#10;&#10;                        // Bottom spacing&#10;                        item {&#10;                            Spacer(modifier = Modifier.height(80.dp))&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;&#10;        // Error handling&#10;        uiState.error?.let { error -&gt;&#10;            LaunchedEffect(error) {&#10;                delay(3000)&#10;                viewModel.clearError()&#10;            }&#10;        }&#10;&#10;//        // Session detail dialog&#10;//        if (uiState.showSessionDetail &amp;&amp; uiState.selectedSession != null) {&#10;////            SessionDetailDialog(&#10;////                session = uiState.selectedSession!!,&#10;////                onDismiss = { viewModel.hideSessionDetail() }&#10;////            )&#10;//        }&#10;&#10;        // Clear all confirmation dialog&#10;        if (showClearAllDialog) {&#10;            AlertDialog(&#10;                onDismissRequest = { showClearAllDialog = false },&#10;                title = {&#10;                    Text(&quot;Xóa tất cả lịch sử&quot;)&#10;                },&#10;                text = {&#10;                    Text(&quot;Bạn có chắc chắn muốn xóa toàn bộ lịch sử? Hành động này không thể hoàn tác.&quot;)&#10;                },&#10;                confirmButton = {&#10;                    TextButton(&#10;                        onClick = {&#10;                            viewModel.clearAllHistory()&#10;                            showClearAllDialog = false&#10;                            wasHistoryCleared = true // ✅ Set flag when history is cleared&#10;                            println(&quot;DEBUG: History cleared, flag set to true&quot;)&#10;                        }&#10;                    ) {&#10;                        Text(&quot;Xóa tất cả&quot;, color = MaterialTheme.colorScheme.error)&#10;                    }&#10;                },&#10;                dismissButton = {&#10;                    TextButton(&#10;                        onClick = { showClearAllDialog = false }&#10;                    ) {&#10;                        Text(&quot;Hủy&quot;)&#10;                    }&#10;                }&#10;            )&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun EmptyHistoryState(&#10;    onRefresh: () -&gt; Unit&#10;) {&#10;    Box(&#10;        modifier = Modifier.fillMaxSize(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Column(&#10;            horizontalAlignment = Alignment.CenterHorizontally,&#10;            verticalArrangement = Arrangement.spacedBy(16.dp)&#10;        ) {&#10;            Text(&#10;                text = &quot;&quot;,&#10;                fontSize = 64.sp&#10;            )&#10;            Text(&#10;                text = &quot;Chưa có lịch sử&quot;,&#10;                fontSize = 20.sp,&#10;                fontWeight = FontWeight.Bold,&#10;                color = Color.White&#10;            )&#10;&#10;            Text(&#10;                text = &quot;Các phiên quay số sẽ được lưu tại đây&quot;,&#10;                fontSize = 14.sp,&#10;                color = Color.White.copy(alpha = 0.7f),&#10;                textAlign = TextAlign.Center&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(8.dp))&#10;&#10;            Button(&#10;                onClick = onRefresh,&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = LotteryGold&#10;                )&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Refresh,&#10;                    contentDescription = null&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&#10;                    text = &quot;Làm mới&quot;,&#10;                    color = Color.Black,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun StatItem(&#10;    title: String,&#10;    value: String&#10;) {&#10;    Column(horizontalAlignment = Alignment.CenterHorizontally) {&#10;        Text(&#10;            text = value,&#10;            fontSize = 20.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            color = LotteryGold&#10;        )&#10;        Text(&#10;            text = title,&#10;            fontSize = 12.sp,&#10;            color = Color.White.copy(alpha = 0.7f)&#10;        )&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/nhathuy/randomlucky/presentation/ui/screen/LotteryScreen.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/nhathuy/randomlucky/presentation/ui/screen/LotteryScreen.kt" />
              <option name="originalContent" value="package com.nhathuy.randomlucky.presentation.ui.screen&#10;&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.animateContentSize&#10;import androidx.compose.animation.core.Spring&#10;import androidx.compose.animation.core.spring&#10;import androidx.compose.animation.fadeIn&#10;import androidx.compose.animation.fadeOut&#10;import androidx.compose.animation.slideInVertically&#10;import androidx.compose.animation.slideOutVertically&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.ui.window.Dialog&#10;import androidx.compose.ui.window.DialogProperties&#10;import androidx.compose.ui.zIndex&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.nhathuy.randomlucky.domain.model.LotterySession&#10;import com.nhathuy.randomlucky.presentation.state.LotteryUiState&#10;import com.nhathuy.randomlucky.presentation.ui.components.*&#10;import com.nhathuy.randomlucky.presentation.viewmodel.LotteryViewModel&#10;import com.nhathuy.randomlucky.presentation.theme.*&#10;import kotlinx.coroutines.delay&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun LotteryScreen(&#10;    viewModel: LotteryViewModel = hiltViewModel(),&#10;    onNavigateToHistory: () -&gt; Unit = {},&#10;    onNavigateToSettings: () -&gt; Unit = {}&#10;) {&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;    val scrollState = rememberScrollState()&#10;&#10;    // State cho hiệu ứng dropping balls và floating results&#10;    var droppingNumbers by remember { mutableStateOf&lt;List&lt;String&gt;&gt;(emptyList()) }&#10;    var floatingResults by remember { mutableStateOf&lt;List&lt;String&gt;&gt;(emptyList()) }&#10;    var currentPrizeName by remember { mutableStateOf(&quot;&quot;) }&#10;    var isShowingFloatingDialog by remember { mutableStateOf(false) }&#10;    var droppingColors by remember { mutableStateOf&lt;List&lt;Color&gt;&gt;(emptyList()) }&#10;    var isSpecialPrize by remember { mutableStateOf(false) }&#10;    var isViewingResults by remember { mutableStateOf(false) }&#10;&#10;    // Theo dõi số lượng kết quả để tự động scroll&#10;    val previousResultCount = remember { mutableStateOf(uiState.results.size) }&#10;    val isFirstLaunch = remember { mutableStateOf(true) }&#10;&#10;    val hasValidResults = uiState.results.isNotEmpty() &amp;&amp;&#10;            uiState.results.values.any { it.numbers.isNotEmpty() }&#10;&#10;    val hasValidSession = uiState.completedSession != null &amp;&amp;&#10;            uiState.completedSession!!.results.isNotEmpty()&#10;&#10;    // Enhanced result handling với dialog logic&#10;    LaunchedEffect(uiState.results.size, uiState.isRolling) {&#10;        val latestResult = uiState.results.values.lastOrNull()&#10;&#10;        if (latestResult != null &amp;&amp; !uiState.isRolling &amp;&amp; latestResult.numbers.isNotEmpty()) {&#10;            currentPrizeName = latestResult.prize.displayName&#10;            isSpecialPrize = latestResult.prize.id == &quot;special&quot;&#10;&#10;            // Xác định màu sắc theo giải&#10;            val prizeColors = List(latestResult.numbers.size) {&#10;                when {&#10;                    latestResult.prize.id == &quot;special&quot; -&gt; Color(0xFFFFD700) // Vàng&#10;                    latestResult.prize.id == &quot;first&quot; -&gt; Color(0xFFE91E63)   // Hồng&#10;                    latestResult.prize.id == &quot;second&quot; -&gt; Color(0xFF2196F3)  // Xanh dương&#10;                    latestResult.prize.id == &quot;third&quot; -&gt; Color(0xFF4CAF50)   // Xanh lá&#10;                    else -&gt; Color(0xFF4FC3F7) // Xanh nhạt&#10;                }&#10;            }&#10;&#10;            //  Phase 1: Chuẩn bị và scroll đến vị trí dropping&#10;            droppingNumbers = latestResult.numbers&#10;            droppingColors = prizeColors&#10;            isShowingFloatingDialog = false&#10;            isViewingResults = false // Reset state&#10;&#10;            //  Scroll để dropping balls hiển thị trong viewport&#10;            delay(100)&#10;            val droppingScrollTarget = when {&#10;                latestResult.numbers.size &lt;= 3 -&gt; 450&#10;                latestResult.numbers.size &lt;= 6 -&gt; 480&#10;                latestResult.numbers.size &lt;= 10 -&gt; 500&#10;                else -&gt; 520&#10;            }&#10;            scrollState.animateScrollTo(droppingScrollTarget)&#10;&#10;            //  Đợi dropping animation hoàn thành - giảm delay time để nhanh hơn&#10;            val dropDuration = when {&#10;                latestResult.numbers.size == 1 -&gt; 1200L      // 1 số: 1200L&#10;                latestResult.numbers.size &lt;= 3 -&gt; 1800L     // 2-3 số:  1800L&#10;                latestResult.numbers.size &lt;= 6 -&gt; 2200L     // 4-6 số:  2200L&#10;                latestResult.numbers.size &lt;= 10 -&gt; 2800L    // 7-10 số:  2800L&#10;                latestResult.numbers.size &lt;= 15 -&gt; 3500L    // 11-15 số:  3500L&#10;                else -&gt; 4200L                               // Nhiều số:  4200L&#10;            }&#10;            delay(dropDuration)&#10;&#10;            //  Kiểm tra nếu đang xem kết quả thì không chuyển sang floating dialog&#10;            if (!isViewingResults) {&#10;                //  Phase 2: Clear dropping, show floating dialog&#10;                droppingNumbers = emptyList()&#10;                floatingResults = latestResult.numbers&#10;                isShowingFloatingDialog = true&#10;            }&#10;        }&#10;&#10;        // Reset khi bắt đầu giải mới&#10;        if (uiState.isRolling &amp;&amp; uiState.currentPrize != null) {&#10;            droppingNumbers = emptyList()&#10;            floatingResults = emptyList()&#10;            isShowingFloatingDialog = false&#10;            isViewingResults = false&#10;&#10;            // Scroll về lottery machine khi bắt đầu quay&#10;            delay(200)&#10;            scrollState.animateScrollTo(150)&#10;        }&#10;    }&#10;&#10;    // Auto scroll logic cho các trường hợp khác&#10;    LaunchedEffect(uiState.results.size, uiState.isRolling) {&#10;        if (isFirstLaunch.value) {&#10;            isFirstLaunch.value = false&#10;            previousResultCount.value = uiState.results.size&#10;            return@LaunchedEffect&#10;        }&#10;&#10;        // Khi reset hoàn toàn (làm mới)&#10;        if (!uiState.isRolling &amp;&amp; uiState.results.isEmpty() &amp;&amp; uiState.currentPrize == null) {&#10;            scrollState.animateScrollTo(0)&#10;            previousResultCount.value = 0&#10;        }&#10;    }&#10;&#10;    // reset khi session hoàn thành hoặc reset lottery&#10;    LaunchedEffect(uiState.completedSession, uiState.results.isEmpty()) {&#10;        if (uiState.completedSession != null || uiState.results.isEmpty()) {&#10;            isShowingFloatingDialog = false&#10;            floatingResults = emptyList()&#10;            isViewingResults = false&#10;            droppingNumbers = emptyList()&#10;        }&#10;    }&#10;&#10;    val handleNavigateToHistory = {&#10;        isShowingFloatingDialog = false&#10;        floatingResults = emptyList()&#10;        isViewingResults = false&#10;        onNavigateToHistory()&#10;    }&#10;&#10;    val handleNavigateToSettings = {&#10;&#10;        isShowingFloatingDialog = false&#10;        floatingResults = emptyList()&#10;        isViewingResults = false&#10;        droppingNumbers = emptyList()&#10;        droppingColors = emptyList()&#10;&#10;        onNavigateToSettings()&#10;    }&#10;&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(&#10;                brush = Brush.verticalGradient(&#10;                    colors = listOf(&#10;                        Color(0xFF0F0F23),&#10;                        Color(0xFF1A1A2E),&#10;                        Color(0xFF16213E)&#10;                    )&#10;                )&#10;            )&#10;    ) {&#10;        // Special effects overlay&#10;        SpecialEffectsOverlay(&#10;            isActive = uiState.isRolling &amp;&amp; uiState.currentPrize?.id == &quot;special&quot; &amp;&amp; !uiState.isPaused,&#10;            modifier = Modifier.fillMaxSize()&#10;        )&#10;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .windowInsetsPadding(WindowInsets.systemBars)&#10;                .verticalScroll(scrollState)&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            // Header&#10;            TopHeader(&#10;                onNavigateToHistory = handleNavigateToHistory,&#10;                onNavigateToSettings = handleNavigateToSettings&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // Current prize display - compact version&#10;            AnimatedVisibility(&#10;                visible = uiState.currentPrize != null,&#10;                enter = slideInVertically() + fadeIn(),&#10;                exit = slideOutVertically() + fadeOut()&#10;            ) {&#10;                uiState.currentPrize?.let { prize -&gt;&#10;                    CurrentPrizeCard(&#10;                        prize = prize,&#10;                        isRolling = uiState.isRolling,&#10;                        isPaused = uiState.isPaused,&#10;                        progress = uiState.rollingProgress&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(20.dp))&#10;&#10;            // Enhanced Lottery machine với số thật&#10;            LotteryBallMachine(&#10;                isRolling = uiState.isRolling &amp;&amp; !uiState.isPaused,&#10;                rollingProgress = uiState.rollingProgress,&#10;                currentNumbers = uiState.currentPrize?.let { prize -&gt;&#10;                    // Tạo danh sách số có thể trúng cho giải này&#10;                    when (prize.id) {&#10;                        &quot;special&quot; -&gt; (1..99).map { it.toString().padStart(2, '0') }.shuffled()&#10;                            .take(12)&#10;&#10;                        &quot;first&quot; -&gt; (1..99).map { it.toString().padStart(2, '0') }.shuffled()&#10;                            .take(10)&#10;&#10;                        &quot;second&quot; -&gt; (10..99).map { it.toString() }.shuffled().take(15)&#10;                        &quot;third&quot; -&gt; (100..999).map { it.toString() }.shuffled().take(20)&#10;                        else -&gt; (1..50).map { it.toString() }.shuffled().take(8)&#10;                    }&#10;                } ?: emptyList(),&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(300.dp)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            // Control buttons&#10;            ControlButtonsSection(&#10;                uiState = uiState,&#10;                onStart = { viewModel.startLottery() },&#10;                onQuickStart = { viewModel.startLottery(withAnimation = false) },&#10;                onPause = { viewModel.pauseLottery() },&#10;                onResume = { viewModel.resumeLottery() },&#10;                onReset = {&#10;                    viewModel.resetLottery()&#10;                    // Clear effects&#10;                    droppingNumbers = emptyList()&#10;                    floatingResults = emptyList()&#10;                    isShowingFloatingDialog = false&#10;                    previousResultCount.value = 0&#10;                    isFirstLaunch.value = false&#10;                }&#10;            )&#10;&#10;            // ✅ Enhanced spacing cho dropping animation section&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;&#10;            // ✅ Dropping balls animation với position tối ưu&#10;            if (droppingNumbers.isNotEmpty()) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(80.dp)&#10;                        .padding(horizontal = 6.dp),&#10;                    contentAlignment = Alignment.TopCenter&#10;                ) {&#10;                    DroppingBallCompleted(&#10;                        numbers = droppingNumbers,&#10;                        colors = droppingColors,&#10;                        isDropping = true,&#10;                        onAllDropsComplete = {&#10;                            // Sound effect hoặc haptic feedback có thể thêm ở đây&#10;                        },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(60.dp)&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(10.dp))&#10;            }&#10;&#10;            // ✅ Spacing tối ưu trước latest result&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            // Latest result section (khi không có floating)&#10;            if (hasValidResults &amp;&amp; !uiState.isRolling &amp;&amp; !isShowingFloatingDialog) {&#10;                LatestResultSection(&#10;                    uiState = uiState,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;            }&#10;&#10;            // Results board cho nhiều giải&#10;            if ((hasValidResults &amp;&amp; uiState.results.size &gt;= 2) || hasValidSession) {&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                LotteryResultsBoard(&#10;                    results = uiState.results,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // Session completion info&#10;            if (hasValidSession) {&#10;                uiState.completedSession?.let { session -&gt;&#10;                    SessionCompletionCard(session = session)&#10;                }&#10;            }&#10;&#10;            // Bottom padding&#10;            Spacer(modifier = Modifier.height(120.dp))&#10;        }&#10;&#10;        // ✅ Floating Result Dialog - hiển thị như overlay&#10;        if (isShowingFloatingDialog &amp;&amp; floatingResults.isNotEmpty()) {&#10;            Dialog(&#10;                onDismissRequest = {&#10;                    if (!isViewingResults) {&#10;                        isShowingFloatingDialog = false&#10;                        floatingResults = emptyList()&#10;                    }&#10;                },&#10;                properties = DialogProperties(&#10;                    dismissOnBackPress = !isViewingResults,&#10;                    dismissOnClickOutside = !isViewingResults,&#10;                    usePlatformDefaultWidth = false&#10;                )&#10;            ) {&#10;                FloatingResultDialog(&#10;                    numbers = floatingResults,&#10;                    prizeName = currentPrizeName,&#10;                    isSpecialPrize = isSpecialPrize,&#10;                    isViewingResults = isViewingResults,&#10;                    isLastPrize = isSpecialPrize, // ✅ Giải đặc biệt là giải cuối cùng&#10;                    onViewResults = {&#10;                        isViewingResults = true&#10;                        // ✅ Thực sự pause lottery thông qua viewModel&#10;                        viewModel.pauseForViewingResults()&#10;                    },&#10;                    onContinue = {&#10;                        isShowingFloatingDialog = false&#10;                        floatingResults = emptyList()&#10;                        isViewingResults = false&#10;                        // ✅ Resume lottery để tiếp tục quay giải tiếp theo&#10;                        viewModel.resumeLottery()&#10;                    },&#10;                    onClose = {&#10;                        // ✅ Đóng dialog khi là giải cuối cùng&#10;                        isShowingFloatingDialog = false&#10;                        floatingResults = emptyList()&#10;                        isViewingResults = false&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// ✅ Enhanced Floating Result Dialog Component&#10;@Composable&#10;private fun FloatingResultDialog(&#10;    numbers: List&lt;String&gt;,&#10;    prizeName: String,&#10;    isSpecialPrize: Boolean,&#10;    isViewingResults: Boolean,&#10;    isLastPrize: Boolean, // ✅ Thêm tham số để xác định giải có phải là giải cuối cùng không&#10;    onViewResults: () -&gt; Unit,&#10;    onContinue: () -&gt; Unit,&#10;    onClose: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth(0.95f)&#10;            .wrapContentHeight()&#10;            .padding(16.dp),&#10;        shape = RoundedCornerShape(24.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = Color(0xFF1A1A2E)&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 16.dp)&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .background(&#10;                    brush = if (isSpecialPrize) {&#10;                        Brush.verticalGradient(&#10;                            colors = listOf(&#10;                                Color(0xFF2D1B69).copy(alpha = 0.8f),&#10;                                Color(0xFF1A1A2E),&#10;                                Color(0xFF0F0F23)&#10;                            )&#10;                        )&#10;                    } else {&#10;                        Brush.verticalGradient(&#10;                            colors = listOf(&#10;                                Color(0xFF1E3A8A).copy(alpha = 0.6f),&#10;                                Color(0xFF1A1A2E),&#10;                                Color(0xFF0F0F23)&#10;                            )&#10;                        )&#10;                    }&#10;                )&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(24.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                // ✅ Enhanced header với animation&#10;                Column(&#10;                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    // Celebration icon&#10;                    Text(&#10;                        text = if (isSpecialPrize) &quot;&quot; else &quot;⭐&quot;,&#10;                        fontSize = 48.sp,&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;&#10;                    // Prize title&#10;                    Text(&#10;                        text = if (isSpecialPrize) &quot; $prizeName &quot; else &quot;✨ $prizeName ✨&quot;,&#10;                        fontSize = if (isSpecialPrize) 24.sp else 22.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = if (isSpecialPrize) LotteryGold else LotteryLightBlue,&#10;                        textAlign = TextAlign.Center,&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    // Subtitle - thay đổi theo trạng thái&#10;                    Text(&#10;                        text = if (isViewingResults) {&#10;                            if (isSpecialPrize) &quot;Đang xem giải thưởng cao nhất&quot; else &quot;Đang xem kết quả&quot;&#10;                        } else {&#10;                            if (isSpecialPrize) &quot;Chúc mừng! Giải thưởng cao nhất!&quot; else &quot;Kết quả vừa được quay!&quot;&#10;                        },&#10;                        fontSize = 14.sp,&#10;                        color = Color.White.copy(alpha = 0.8f),&#10;                        textAlign = TextAlign.Center,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;&#10;                // ✅ Enhanced FloatingResultGrid&#10;                FloatingResultGrid(&#10;                    numbers = numbers,&#10;                    prizeName = prizeName,&#10;                    isSpecialPrize = isSpecialPrize,&#10;                    isVisible = true,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;&#10;                // ✅ Action buttons row - thay đổi theo trạng thái và loại giải&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    if (isLastPrize) {&#10;                        // ✅ Nút &quot;Đóng&quot; cho giải đặc biệt (giải cuối cùng)&#10;                        Button(&#10;                            onClick = {&#10;                                onClose()&#10;                                println(&quot;DEBUG: Clicked Close button for special prize&quot;)&#10;                            },&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .height(48.dp),&#10;                            colors = ButtonDefaults.buttonColors(&#10;                                containerColor = LotteryGold&#10;                            ),&#10;                            shape = RoundedCornerShape(24.dp)&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Close,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(18.dp)&#10;                            )&#10;                            Spacer(modifier = Modifier.width(6.dp))&#10;                            Text(&#10;                                text = &quot;Đóng&quot;,&#10;                                fontSize = 16.sp,&#10;                                fontWeight = FontWeight.Bold,&#10;                                color = Color.Black&#10;                            )&#10;                        }&#10;                    } else {&#10;                        // ✅ Logic cũ cho các giải khác&#10;                        if (!isViewingResults) {&#10;                            // View results button&#10;                            Button(&#10;                                onClick = {&#10;                                    onViewResults()&#10;                                    println(&quot;DEBUG: Clicked View Results button&quot;)&#10;                                },&#10;                                modifier = Modifier&#10;                                    .weight(1f)&#10;                                    .height(48.dp),&#10;                                colors = ButtonDefaults.buttonColors(&#10;                                    containerColor = LotteryLightBlue&#10;                                ),&#10;                                shape = RoundedCornerShape(24.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Visibility,&#10;                                    contentDescription = null,&#10;                                    modifier = Modifier.size(18.dp)&#10;                                )&#10;                                Spacer(modifier = Modifier.width(6.dp))&#10;                                Text(&#10;                                    text = &quot;Xem kết quả&quot;,&#10;                                    fontSize = 16.sp,&#10;                                    fontWeight = FontWeight.Bold,&#10;                                    color = Color.White&#10;                                )&#10;                            }&#10;                        } else {&#10;                            // Continue button - hiển thị khi đang xem kết quả&#10;                            Button(&#10;                                onClick = {&#10;                                    onContinue()&#10;                                    println(&quot;DEBUG: Clicked Continue button&quot;)&#10;                                },&#10;                                modifier = Modifier&#10;                                    .weight(1f)&#10;                                    .height(48.dp),&#10;                                colors = ButtonDefaults.buttonColors(&#10;                                    containerColor = LotteryGreen&#10;                                ),&#10;                                shape = RoundedCornerShape(24.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.PlayArrow,&#10;                                    contentDescription = null,&#10;                                    modifier = Modifier.size(18.dp)&#10;                                )&#10;                                Spacer(modifier = Modifier.width(6.dp))&#10;                                Text(&#10;                                    text = &quot;Tiếp tục&quot;,&#10;                                    fontSize = 16.sp,&#10;                                    fontWeight = FontWeight.Bold,&#10;                                    color = Color.White&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;&#10;                // ✅ Hint text - thay đổi theo trạng thái&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                Card(&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = Color.White.copy(alpha = 0.05f)&#10;                    ),&#10;                    shape = RoundedCornerShape(12.dp),&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(12.dp),&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Info,&#10;                            contentDescription = null,&#10;                            tint = Color.White.copy(alpha = 0.6f),&#10;                            modifier = Modifier.size(16.dp)&#10;                        )&#10;                        Text(&#10;                            text = if (isLastPrize) {&#10;                                &quot; Tất cả giải đã hoàn thành! Nhấn 'Đóng' để kết thúc.&quot;&#10;                            } else if (isViewingResults) {&#10;                                &quot; Nhấn 'Tiếp tục' để quay giải tiếp theo&quot;&#10;                            } else {&#10;                                &quot; Nhấn 'Xem kết quả' để tạm dừng và xem chi tiết&quot;&#10;                            },&#10;                            fontSize = 12.sp,&#10;                            color = Color.White.copy(alpha = 0.6f),&#10;                            fontWeight = FontWeight.Medium,&#10;                            modifier = Modifier.weight(1f)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun LatestResultSection(&#10;    uiState: LotteryUiState,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    // hiển thị kết quả vừa quay&#10;    val latestResult = uiState.results.values.lastOrNull()&#10;&#10;    AnimatedVisibility(&#10;        visible = latestResult != null &amp;&amp; !uiState.isRolling,&#10;        enter = slideInVertically(&#10;            initialOffsetY = { fullHeight -&gt; fullHeight },&#10;            animationSpec = spring(&#10;                dampingRatio = 0.8f,&#10;                stiffness = 300f&#10;            )&#10;        ) + fadeIn(&#10;            animationSpec = spring(&#10;                dampingRatio = 0.8f,&#10;                stiffness = 300f&#10;            )&#10;        ),&#10;        exit = slideOutVertically(&#10;            targetOffsetY = { fullHeight -&gt; -fullHeight }&#10;        ) + fadeOut(),&#10;        modifier = modifier&#10;    ) {&#10;        latestResult?.let { result -&gt;&#10;            Column(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                verticalArrangement = Arrangement.spacedBy(2.dp)&#10;            ) {&#10;                // Section header - flat design như settings&#10;                Text(&#10;                    text = &quot; KẾT QUẢ VỪA QUAY&quot;,&#10;                    fontSize = 14.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = LotteryGold,&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(&#10;                            start = 16.dp,&#10;                            top = 8.dp,&#10;                            bottom = 8.dp&#10;                        )&#10;                )&#10;&#10;                // Main result item - flat design như settings item&#10;                Surface(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .animateContentSize(&#10;                            animationSpec = spring(&#10;                                dampingRatio = 0.7f,&#10;                                stiffness = 400f&#10;                            )&#10;                        ),&#10;                    color = Color(0xFF2C2C2C),&#10;                    shape = RoundedCornerShape(12.dp)&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(horizontal = 16.dp, vertical = 16.dp)&#10;                    ) {&#10;                        // Prize header row - giống style settings item&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            horizontalArrangement = Arrangement.SpaceBetween,&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Row(&#10;                                verticalAlignment = Alignment.CenterVertically,&#10;                                horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;                            ) {&#10;                                // Prize icon box - giống settings icon box&#10;                                Box(&#10;                                    modifier = Modifier&#10;                                        .size(48.dp)&#10;                                        .clip(RoundedCornerShape(12.dp))&#10;                                        .background(&#10;                                            if (result.prize.id == &quot;special&quot;) {&#10;                                                LotteryGold.copy(alpha = 0.2f)&#10;                                            } else {&#10;                                                LotteryLightBlue.copy(alpha = 0.2f)&#10;                                            }&#10;                                        ),&#10;                                    contentAlignment = Alignment.Center&#10;                                ) {&#10;                                    Icon(&#10;                                        imageVector = if (result.prize.id == &quot;special&quot;) {&#10;                                            Icons.Default.EmojiEvents&#10;                                        } else {&#10;                                            Icons.Default.Star&#10;                                        },&#10;                                        contentDescription = null,&#10;                                        tint = if (result.prize.id == &quot;special&quot;) {&#10;                                            LotteryGold&#10;                                        } else {&#10;                                            LotteryLightBlue&#10;                                        },&#10;                                        modifier = Modifier.size(24.dp)&#10;                                    )&#10;                                }&#10;&#10;                                // Prize info - giống settings text layout&#10;                                Column {&#10;                                    Text(&#10;                                        text = result.prize.name,&#10;                                        fontSize = 17.sp,&#10;                                        fontWeight = FontWeight.SemiBold,&#10;                                        color = Color.White&#10;                                    )&#10;                                    Text(&#10;                                        text = &quot;Vừa hoàn thành • ${result.numbers.size} số&quot;,&#10;                                        fontSize = 14.sp,&#10;                                        color = Color.White.copy(alpha = 0.7f),&#10;                                        lineHeight = 18.sp&#10;                                    )&#10;                                }&#10;                            }&#10;&#10;                            // Badge - style settings&#10;                            if (result.prize.id == &quot;special&quot;) {&#10;                                Box(&#10;                                    modifier = Modifier&#10;                                        .background(&#10;                                            brush = Brush.horizontalGradient(&#10;                                                colors = listOf(LotteryGold, Color(0xFFFFE55C))&#10;                                            ),&#10;                                            shape = RoundedCornerShape(8.dp)&#10;                                        )&#10;                                        .padding(horizontal = 8.dp, vertical = 4.dp)&#10;                                ) {&#10;                                    Text(&#10;                                        text = &quot;ĐẶC BIỆT&quot;,&#10;                                        fontSize = 10.sp,&#10;                                        fontWeight = FontWeight.Bold,&#10;                                        color = Color.Black&#10;                                    )&#10;                                }&#10;                            } else {&#10;                                Box(&#10;                                    modifier = Modifier&#10;                                        .background(&#10;                                            color = LotteryGreen,&#10;                                            shape = RoundedCornerShape(8.dp)&#10;                                        )&#10;                                        .padding(horizontal = 6.dp, vertical = 2.dp)&#10;                                ) {&#10;                                    Text(&#10;                                        text = &quot;MỚI&quot;,&#10;                                        fontSize = 10.sp,&#10;                                        fontWeight = FontWeight.Bold,&#10;                                        color = Color.White&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                        // Enhanced Numbers display với design đẹp hơn&#10;                        LazyRow(&#10;                            horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                            contentPadding = PaddingValues(horizontal = 4.dp),&#10;                            modifier = Modifier.fillMaxWidth()&#10;                        ) {&#10;                            items(result.numbers.size) { index -&gt;&#10;                                val number = result.numbers[index]&#10;&#10;                                // Staggered animation cho latest result&#10;                                var isNumberVisible by remember { mutableStateOf(false) }&#10;&#10;                                LaunchedEffect(index) {&#10;                                    delay(index * 150L) // Staggered delay&#10;                                    isNumberVisible = true&#10;                                }&#10;&#10;                                AnimatedVisibility(&#10;                                    visible = isNumberVisible,&#10;                                    enter = fadeIn(&#10;                                        animationSpec = spring(dampingRatio = Spring.DampingRatioMediumBouncy)&#10;                                    ) + slideInVertically(&#10;                                        initialOffsetY = { it },&#10;                                        animationSpec = spring(dampingRatio = Spring.DampingRatioMediumBouncy)&#10;                                    )&#10;                                ) {&#10;                                    //  Enhanced lottery ball với size và spacing tốt hơn&#10;                                    Box(&#10;                                        modifier = Modifier&#10;                                            .size(56.dp) // Tăng size để tránh vỡ số&#10;                                            .clip(CircleShape) // Dùng CircleShape cho hình tròn hoàn hảo&#10;                                            .background(&#10;                                                brush = if (result.prize.id == &quot;special&quot;) {&#10;                                                    // Gradient đặc biệt cho giải đặc biệt&#10;                                                    Brush.radialGradient(&#10;                                                        colors = listOf(&#10;                                                            Color(0xFFFFD700), // Vàng sáng&#10;                                                            Color(0xFFFFB300), // Vàng đậm&#10;                                                            Color(0xFFFF8F00)  // Cam vàng&#10;                                                        ),&#10;                                                        radius = 60f&#10;                                                    )&#10;                                                } else {&#10;                                                    // Gradient cho giải thường&#10;                                                    Brush.radialGradient(&#10;                                                        colors = listOf(&#10;                                                            Color(0xFFFFD700), // Vàng sáng&#10;                                                            Color(0xFFFFA500), // Cam vàng&#10;                                                            Color(0xFFFF7043)  // Cam đậm&#10;                                                        ),&#10;                                                        radius = 50f&#10;                                                    )&#10;                                                }&#10;                                            )&#10;                                            // Thêm shadow effect&#10;                                            .let { baseModifier -&gt;&#10;                                                if (result.prize.id == &quot;special&quot;) {&#10;                                                    baseModifier.background(&#10;                                                        brush = Brush.radialGradient(&#10;                                                            colors = listOf(&#10;                                                                Color.Transparent,&#10;                                                                LotteryGold.copy(alpha = 0.3f)&#10;                                                            ),&#10;                                                            radius = 70f&#10;                                                        ),&#10;                                                        shape = CircleShape&#10;                                                    )&#10;                                                } else baseModifier&#10;                                            },&#10;                                        contentAlignment = Alignment.Center&#10;                                    ) {&#10;                                        // Text với font size phù hợp&#10;                                        Text(&#10;                                            text = number,&#10;                                            fontSize = when {&#10;                                                number.length &gt;= 5 -&gt; 14.sp // Số dài&#10;                                                number.length &gt;= 3 -&gt; 16.sp // Số trung bình&#10;                                                else -&gt; 18.sp // Số ngắn&#10;                                            },&#10;                                            fontWeight = FontWeight.Bold,&#10;                                            color = Color.Black,&#10;                                            textAlign = TextAlign.Center,&#10;                                            maxLines = 1,&#10;                                            //  Đảm bảo text không bị overflow&#10;                                            modifier = Modifier.wrapContentSize()&#10;                                        )&#10;&#10;                                        //  Thêm highlight effect cho giải đặc biệt&#10;                                        if (result.prize.id == &quot;special&quot;) {&#10;                                            Box(&#10;                                                modifier = Modifier&#10;                                                    .size(64.dp)&#10;                                                    .clip(CircleShape)&#10;                                                    .background(&#10;                                                        brush = Brush.radialGradient(&#10;                                                            colors = listOf(&#10;                                                                Color.Transparent,&#10;                                                                LotteryGold.copy(alpha = 0.2f)&#10;                                                            )&#10;                                                        )&#10;                                                    )&#10;                                            )&#10;                                        }&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;&#10;                        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                        // Bottom info row - giống settings description&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            horizontalArrangement = Arrangement.SpaceBetween,&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Text(&#10;                                text = &quot; Kết quả:&quot;,&#10;                                fontSize = 14.sp,&#10;                                color = Color.White.copy(alpha = 0.7f),&#10;                                fontWeight = FontWeight.Medium&#10;                            )&#10;&#10;                            Text(&#10;                                text = &quot;Quay thành công ${result.numbers.size} số&quot;,&#10;                                fontSize = 14.sp,&#10;                                color = LotteryGold,&#10;                                fontWeight = FontWeight.Medium&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                // Special prize celebration - flat design&#10;                if (result.prize.id == &quot;special&quot;) {&#10;                    Surface(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        color = Color(0xFF2D1B69).copy(alpha = 0.3f),&#10;                        shape = RoundedCornerShape(0.dp)&#10;                    ) {&#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(horizontal = 16.dp, vertical = 16.dp)&#10;                                .animateContentSize(),&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;                        ) {&#10;                            // Celebration icon&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .size(48.dp)&#10;                                    .clip(RoundedCornerShape(12.dp))&#10;                                    .background(LotteryGold.copy(alpha = 0.2f)),&#10;                                contentAlignment = Alignment.Center&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;&quot;,&#10;                                    fontSize = 24.sp&#10;                                )&#10;                            }&#10;&#10;                            // Celebration message&#10;                            Column(&#10;                                modifier = Modifier.weight(1f)&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;Chúc mừng!&quot;,&#10;                                    fontSize = 17.sp,&#10;                                    fontWeight = FontWeight.SemiBold,&#10;                                    color = LotteryGold&#10;                                )&#10;                                Text(&#10;                                    text = &quot;Bạn đã trúng giải đặc biệt - giải thưởng cao nhất!&quot;,&#10;                                    fontSize = 14.sp,&#10;                                    color = Color.White.copy(alpha = 0.8f),&#10;                                    lineHeight = 18.sp&#10;                                )&#10;                            }&#10;&#10;                            // Celebration badge&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .background(&#10;                                        brush = Brush.horizontalGradient(&#10;                                            colors = listOf(LotteryGold, Color(0xFFFFE55C))&#10;                                        ),&#10;                                        shape = RoundedCornerShape(8.dp)&#10;                                    )&#10;                                    .padding(horizontal = 8.dp, vertical = 4.dp)&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;XUẤT SẮC&quot;,&#10;                                    fontSize = 10.sp,&#10;                                    fontWeight = FontWeight.Bold,&#10;                                    color = Color.Black&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun TopHeader(&#10;    onNavigateToHistory: () -&gt; Unit = {},&#10;    onNavigateToSettings: () -&gt; Unit = {}&#10;) {&#10;    var showDropdownMenu by remember { mutableStateOf(false) }&#10;    var showAboutDialog by remember { mutableStateOf(false) }&#10;    Row(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        horizontalArrangement = Arrangement.SpaceBetween,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Text(&#10;            text = &quot;XỔ SỐ MAY MẮN&quot;,&#10;            fontSize = 22.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            color = LotteryGold&#10;        )&#10;&#10;        Box {&#10;            IconButton(&#10;                onClick = { showDropdownMenu = true },&#10;                modifier = Modifier&#10;                    .size(40.dp)&#10;                    .background(&#10;                        color = Color.White.copy(alpha = 0.1f),&#10;                        shape = CircleShape&#10;                    )&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Settings,&#10;                    contentDescription = &quot;Cài đặt&quot;,&#10;                    tint = Color.White,&#10;                    modifier = Modifier.size(20.dp)&#10;                )&#10;            }&#10;            //dropdown menu&#10;            DropdownMenu(&#10;                expanded = showDropdownMenu,&#10;                onDismissRequest = { showDropdownMenu = false },&#10;                modifier = Modifier.background(&#10;                    color = Color(0xFF1A1A2E),&#10;                    shape = RoundedCornerShape(12.dp)&#10;                )&#10;            ) {&#10;                // history menu item&#10;                DropdownMenuItem(&#10;                    text = {&#10;                        Row(&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.History,&#10;                                contentDescription = null,&#10;                                tint = LotteryGold,&#10;                                modifier = Modifier.size(20.dp)&#10;                            )&#10;                            Text(&#10;                                text = &quot;Lịch sử&quot;,&#10;                                color = Color.White,&#10;                                fontSize = 16.sp,&#10;                                fontWeight = FontWeight.Medium&#10;                            )&#10;                        }&#10;                    },&#10;                    onClick = {&#10;                        showDropdownMenu = false&#10;                        onNavigateToHistory()&#10;                    },&#10;                    modifier = Modifier.padding(horizontal = 4.dp)&#10;                )&#10;&#10;                // divider&#10;                HorizontalDivider(&#10;                    color = Color.White.copy(alpha = 0.2f),&#10;                    thickness = 1.dp,&#10;                    modifier = Modifier.padding(horizontal = 12.dp)&#10;                )&#10;                //Settings menu item&#10;                DropdownMenuItem(&#10;                    text = {&#10;                        Row(&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Settings,&#10;                                contentDescription = null,&#10;                                tint = LotteryGold,&#10;                                modifier = Modifier.size(20.dp)&#10;                            )&#10;&#10;                            Text(&#10;                                text = &quot;Cài đặt&quot;,&#10;                                color = Color.White,&#10;                                fontSize = 16.sp,&#10;                                fontWeight = FontWeight.Medium&#10;                            )&#10;                        }&#10;                    }, onClick = {&#10;                        showDropdownMenu = false&#10;                        onNavigateToSettings()&#10;                    },&#10;                    modifier = Modifier.padding(horizontal = 4.dp)&#10;                )&#10;&#10;                // Thêm các menu item khác nếu cần&#10;                HorizontalDivider(&#10;                    color = Color.White.copy(alpha = 0.2f),&#10;                    thickness = 1.dp,&#10;                    modifier = Modifier.padding(horizontal = 12.dp)&#10;                )&#10;&#10;                // about menu item&#10;                DropdownMenuItem(&#10;                    text = {&#10;                        Row(&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Info,&#10;                                contentDescription = null,&#10;                                tint = LotteryGold,&#10;                                modifier = Modifier.size(20.dp)&#10;                            )&#10;                            Text(&#10;                                text = &quot;Về ứng dụng&quot;,&#10;                                color = Color.White,&#10;                                fontSize = 16.sp,&#10;                                fontWeight = FontWeight.Medium&#10;                            )&#10;                        }&#10;                    },&#10;                    onClick = {&#10;                        showDropdownMenu = false&#10;                        showAboutDialog = true&#10;                    },&#10;                    modifier = Modifier.padding(horizontal = 4.dp)&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    if (showAboutDialog) {&#10;        AboutDialog(onDismiss = { showAboutDialog = false })&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun AboutDialog(onDismiss: () -&gt; Unit) {&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = {&#10;            Column(&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .size(80.dp)&#10;                        .clip(RoundedCornerShape(20.dp))&#10;                        .background(&#10;                            Brush.radialGradient(&#10;                                colors = listOf(&#10;                                    LotteryGold.copy(alpha = 0.3f),&#10;                                    LotteryGold.copy(alpha = 0.1f)&#10;                                )&#10;                            )&#10;                        ),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.EmojiEvents,&#10;                        contentDescription = null,&#10;                        tint = LotteryGold,&#10;                        modifier = Modifier.size(48.dp)&#10;                    )&#10;                }&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Text(&#10;                    text = &quot;Random Lucky&quot;,&#10;                    fontSize = 24.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = LotteryGold&#10;                )&#10;            }&#10;        },&#10;        text = {&#10;            Column {&#10;                Text(&#10;                    text = &quot;Ứng dụng xổ số may mắn hàng đầu Việt Nam&quot;,&#10;                    fontSize = 16.sp,&#10;                    fontWeight = FontWeight.Medium,&#10;                    textAlign = TextAlign.Center,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    color = Color.Gray&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;&#10;                InfoRow(&quot;Phiên bản&quot;, &quot;1.0.0&quot;, LotteryLightBlue)&#10;                InfoRow(&quot;Nhà phát triển&quot;, &quot;TravisHuy&quot;, LotteryGreen)&#10;                InfoRow(&quot;Ngày phát hành&quot;, &quot;02/08/2025&quot;, LotteryPurple)&#10;                InfoRow(&quot;Nền tảng&quot;, &quot;Android&quot;, LotteryOrange)&#10;&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .clip(RoundedCornerShape(12.dp))&#10;                        .background(LotteryGold.copy(alpha = 0.1f))&#10;                        .padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot; Cảm ơn bạn đã tin tưởng và sử dụng Random Lucky!&quot;,&#10;                        fontSize = 14.sp,&#10;                        textAlign = TextAlign.Center,&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        color = LotteryGold,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                }&#10;            }&#10;        },&#10;        confirmButton = {&#10;            TextButton(&#10;                onClick = onDismiss,&#10;                colors = ButtonDefaults.textButtonColors(&#10;                    contentColor = LotteryGold&#10;                )&#10;            ) {&#10;                Text(&#10;                    &quot;Đóng&quot;,&#10;                    fontWeight = FontWeight.SemiBold&#10;                )&#10;            }&#10;        },&#10;        containerColor = Color(0xFF1E1E2E),&#10;        shape = RoundedCornerShape(20.dp)&#10;    )&#10;}&#10;&#10;@Composable&#10;private fun InfoRow(label: String, value: String, color: Color = LotteryGold) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 6.dp),&#10;        horizontalArrangement = Arrangement.SpaceBetween,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Text(&#10;            text = label,&#10;            fontSize = 15.sp,&#10;            color = Color.Gray,&#10;            fontWeight = FontWeight.Medium&#10;        )&#10;        Text(&#10;            text = value,&#10;            fontSize = 15.sp,&#10;            fontWeight = FontWeight.SemiBold,&#10;            color = color&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun CurrentPrizeCard(&#10;    prize: com.nhathuy.randomlucky.domain.model.LotteryPrize,&#10;    isRolling: Boolean,&#10;    isPaused: Boolean,&#10;    progress: Float&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(140.dp),&#10;        shape = RoundedCornerShape(20.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = if (prize.id == &quot;special&quot;) {&#10;                Color(0xFF2D1B69)&#10;            } else {&#10;                Color(0xFF1E3A8A)&#10;            }&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Column(&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                // Status text&#10;                Text(&#10;                    text = when {&#10;                        isPaused -&gt; &quot;⏸️ TẠM DỪNG&quot;&#10;                        isRolling -&gt; &quot; ĐANG QUAY&quot;&#10;                        else -&gt; &quot;⭐ CHUẨN BỊ&quot;&#10;                    },&#10;                    fontSize = 14.sp,&#10;                    color = when {&#10;                        isPaused -&gt; LotteryOrange&#10;                        else -&gt; Color.White.copy(alpha = 0.8f)&#10;                    },&#10;                    letterSpacing = 1.sp,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                // Prize name&#10;                Text(&#10;                    text = prize.displayName,&#10;                    fontSize = if (prize.id == &quot;special&quot;) 26.sp else 22.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = if (prize.id == &quot;special&quot;) LotteryGold else Color.White,&#10;                    textAlign = TextAlign.Center,&#10;                    maxLines = 1&#10;                )&#10;&#10;                // Progress indicator&#10;                if (isRolling &amp;&amp; !isPaused) {&#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;                    LinearProgressIndicator(&#10;                        progress = progress,&#10;                        modifier = Modifier&#10;                            .width(120.dp)&#10;                            .height(6.dp)&#10;                            .clip(RoundedCornerShape(3.dp)),&#10;                        color = LotteryGold,&#10;                        trackColor = Color.White.copy(alpha = 0.3f)&#10;                    )&#10;&#10;                    Text(&#10;                        text = &quot;${(progress * 100).toInt()}%&quot;,&#10;                        fontSize = 12.sp,&#10;                        color = LotteryGold,&#10;                        fontWeight = FontWeight.Medium,&#10;                        modifier = Modifier.padding(top = 4.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// Giữ nguyên ControlButtonsSection từ version cũ&#10;@Composable&#10;private fun ControlButtonsSection(&#10;    uiState: LotteryUiState,&#10;    onStart: () -&gt; Unit,&#10;    onQuickStart: () -&gt; Unit,&#10;    onPause: () -&gt; Unit,&#10;    onResume: () -&gt; Unit,&#10;    onReset: () -&gt; Unit&#10;) {&#10;    Column(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;    ) {&#10;        // Main control buttons&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            // Primary action button&#10;            Button(&#10;                onClick = {&#10;                    when {&#10;                        uiState.isPaused -&gt; onResume()&#10;                        uiState.isRunning -&gt; onReset()&#10;                        else -&gt; onStart()&#10;                    }&#10;                },&#10;                modifier = Modifier&#10;                    .weight(1f)&#10;                    .height(52.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = when {&#10;                        uiState.isPaused -&gt; LotteryGreen&#10;                        uiState.isRunning -&gt; LotteryRed&#10;                        else -&gt; LotteryGold&#10;                    }&#10;                ),&#10;                shape = RoundedCornerShape(26.dp),&#10;                elevation = ButtonDefaults.buttonElevation(defaultElevation = 4.dp)&#10;            ) {&#10;                Icon(&#10;                    imageVector = when {&#10;                        uiState.isPaused -&gt; Icons.Default.PlayArrow&#10;                        uiState.isRunning -&gt; Icons.Default.Refresh&#10;                        else -&gt; Icons.Default.PlayArrow&#10;                    },&#10;                    contentDescription = null,&#10;                    modifier = Modifier.size(20.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&#10;                    text = when {&#10;                        uiState.isPaused -&gt; &quot;Tiếp tục&quot;&#10;                        uiState.isRunning -&gt; &quot;Làm mới&quot;&#10;                        else -&gt; &quot;Bắt đầu&quot;&#10;                    },&#10;                    fontSize = 16.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = Color.Black&#10;                )&#10;            }&#10;&#10;            // Quick draw button (only when not running)&#10;            if (!uiState.isRunning) {&#10;                OutlinedButton(&#10;                    onClick = onQuickStart,&#10;                    modifier = Modifier&#10;                        .weight(1f)&#10;                        .height(52.dp),&#10;                    shape = RoundedCornerShape(26.dp),&#10;                    colors = ButtonDefaults.outlinedButtonColors(&#10;                        containerColor = Color.White.copy(alpha = 0.1f),&#10;                        contentColor = Color.White&#10;                    ),&#10;                    border = ButtonDefaults.outlinedButtonBorder.copy(&#10;                        brush = Brush.linearGradient(&#10;                            colors = listOf(LotteryGold, Color.White)&#10;                        )&#10;                    )&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.FastForward,&#10;                        contentDescription = null,&#10;                        modifier = Modifier.size(18.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.width(6.dp))&#10;                    Text(&#10;                        text = &quot;Nhanh&quot;,&#10;                        fontSize = 14.sp,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // Enhanced secondary control buttons - hiển thị khi đang chạy HOẶC có kết quả và không hoàn thành&#10;        AnimatedVisibility(&#10;            visible = uiState.isRunning || (uiState.results.isNotEmpty() &amp;&amp; uiState.completedSession == null),&#10;            enter = slideInVertically() + fadeIn(),&#10;            exit = slideOutVertically() + fadeOut()&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                // Pause button - hiển thị khi đang rolling HOẶC có kết quả và session chưa hoàn thành&#10;                if (uiState.canPause || (!uiState.isRolling &amp;&amp; uiState.results.isNotEmpty() &amp;&amp; uiState.completedSession == null)) {&#10;                    Button(&#10;                        onClick = {&#10;                            if (uiState.isRolling) {&#10;                                onPause() // T��m dừng khi đang quay&#10;                            } else {&#10;                                // Tạm dừng để xem kết quả - logic này sẽ được handle trong ViewModel&#10;                                onPause()&#10;                            }&#10;                        },&#10;                        modifier = Modifier&#10;                            .weight(1f)&#10;                            .height(44.dp),&#10;                        colors = ButtonDefaults.buttonColors(&#10;                            containerColor = if (uiState.isRolling) LotteryOrange else LotteryLightBlue&#10;                        ),&#10;                        shape = RoundedCornerShape(22.dp)&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = if (uiState.isRolling) Icons.Default.Pause else Icons.Default.Visibility,&#10;                            contentDescription = null,&#10;                            modifier = Modifier.size(16.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.width(6.dp))&#10;                        Text(&#10;                            text = if (uiState.isRolling) &quot;Tạm dừng&quot; else &quot;Xem kết quả&quot;,&#10;                            fontSize = 13.sp,&#10;                            fontWeight = FontWeight.Medium,&#10;                            color = Color.White&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Stop button - luôn hiển thị khi có activity&#10;                OutlinedButton(&#10;                    onClick = onReset,&#10;                    modifier = Modifier&#10;                        .weight(1f)&#10;                        .height(44.dp),&#10;                    shape = RoundedCornerShape(22.dp),&#10;                    colors = ButtonDefaults.outlinedButtonColors(&#10;                        contentColor = LotteryRed&#10;                    )&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Stop,&#10;                        contentDescription = null,&#10;                        modifier = Modifier.size(16.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.width(6.dp))&#10;                    Text(&#10;                        text = &quot;Dừng&quot;,&#10;                        fontSize = 13.sp,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // Result viewing hint - hiển thị khi có kết quả mới&#10;        if (!uiState.isRolling &amp;&amp; uiState.results.isNotEmpty() &amp;&amp; uiState.completedSession == null) {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                shape = RoundedCornerShape(12.dp),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = LotteryGold.copy(alpha = 0.1f)&#10;                )&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(12.dp),&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Info,&#10;                        contentDescription = null,&#10;                        tint = LotteryGold,&#10;                        modifier = Modifier.size(16.dp)&#10;                    )&#10;                    Text(&#10;                        text = &quot;✨ Kết quả đã sẵn sàng! Bạn có thể xem kết quả hoặc tiếp tục quay giải tiếp theo.&quot;,&#10;                        fontSize = 12.sp,&#10;                        color = LotteryGold,&#10;                        fontWeight = FontWeight.Medium,&#10;                        modifier = Modifier.weight(1f)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SessionCompletionCard(&#10;    session: LotterySession,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Box(&#10;        modifier = modifier.fillMaxWidth(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .wrapContentHeight(),&#10;            shape = RoundedCornerShape(16.dp),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = Color(0xFF1A237E).copy(alpha = 0.8f)&#10;            ),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)&#10;        ) {&#10;            // Thêm gradient background overlay&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .background(&#10;                        brush = Brush.horizontalGradient(&#10;                            colors = listOf(&#10;                                LotteryGold.copy(alpha = 0.1f),&#10;                                LotteryPurple.copy(alpha = 0.1f),&#10;                                Color(0xFF1E88E5).copy(alpha = 0.1f)&#10;                            )&#10;                        )&#10;                    )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(20.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                    verticalArrangement = Arrangement.Center&#10;                ) {&#10;                    // Icon và title với hiệu ứng shimmer&#10;                    Text(&#10;                        text = &quot; HOÀN TẤT! &quot;,&#10;                        fontSize = 20.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = LotteryGold, // Giữ màu vàng nổi bật&#10;                        textAlign = TextAlign.Center,&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                    // Mô tả với màu sáng hơn&#10;                    Text(&#10;                        text = &quot;Tất cả các giải đã được quay xong&quot;,&#10;                        fontSize = 14.sp,&#10;                        fontWeight = FontWeight.Medium,&#10;                        color = Color.White.copy(alpha = 0.9f), // Tăng độ sáng&#10;                        textAlign = TextAlign.Center,&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    // Mã session với màu accent&#10;                    Text(&#10;                        text = &quot;Mã: ${session.id.take(8)}&quot;,&#10;                        fontSize = 12.sp,&#10;                        fontWeight = FontWeight.Normal,&#10;                        color = LotteryGold.copy(alpha = 0.7f),&#10;                        textAlign = TextAlign.Center,&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;" />
              <option name="updatedContent" value="package com.nhathuy.randomlucky.presentation.ui.screen&#10;&#10;import androidx.compose.animation.AnimatedVisibility&#10;import androidx.compose.animation.animateContentSize&#10;import androidx.compose.animation.core.Spring&#10;import androidx.compose.animation.core.spring&#10;import androidx.compose.animation.fadeIn&#10;import androidx.compose.animation.fadeOut&#10;import androidx.compose.animation.slideInVertically&#10;import androidx.compose.animation.slideOutVertically&#10;import androidx.compose.foundation.background&#10;import androidx.compose.foundation.layout.*&#10;import androidx.compose.foundation.lazy.LazyRow&#10;import androidx.compose.foundation.rememberScrollState&#10;import androidx.compose.foundation.shape.CircleShape&#10;import androidx.compose.foundation.shape.RoundedCornerShape&#10;import androidx.compose.foundation.verticalScroll&#10;import androidx.compose.material.icons.Icons&#10;import androidx.compose.material.icons.filled.*&#10;import androidx.compose.material3.*&#10;import androidx.compose.runtime.*&#10;import androidx.compose.ui.Alignment&#10;import androidx.compose.ui.Modifier&#10;import androidx.compose.ui.draw.clip&#10;import androidx.compose.ui.graphics.Brush&#10;import androidx.compose.ui.graphics.Color&#10;import androidx.compose.ui.text.font.FontWeight&#10;import androidx.compose.ui.text.style.TextAlign&#10;import androidx.compose.ui.unit.dp&#10;import androidx.compose.ui.unit.sp&#10;import androidx.compose.ui.window.Dialog&#10;import androidx.compose.ui.window.DialogProperties&#10;import androidx.compose.ui.zIndex&#10;import androidx.hilt.navigation.compose.hiltViewModel&#10;import androidx.lifecycle.compose.collectAsStateWithLifecycle&#10;import com.nhathuy.randomlucky.domain.model.LotterySession&#10;import com.nhathuy.randomlucky.presentation.state.LotteryUiState&#10;import com.nhathuy.randomlucky.presentation.ui.components.*&#10;import com.nhathuy.randomlucky.presentation.viewmodel.LotteryViewModel&#10;import com.nhathuy.randomlucky.presentation.viewmodel.HistoryViewModel&#10;import com.nhathuy.randomlucky.presentation.theme.*&#10;import kotlinx.coroutines.delay&#10;&#10;@OptIn(ExperimentalMaterial3Api::class)&#10;@Composable&#10;fun LotteryScreen(&#10;    viewModel: LotteryViewModel = hiltViewModel(),&#10;    historyViewModel: HistoryViewModel = hiltViewModel(),&#10;    onNavigateToHistory: () -&gt; Unit = {},&#10;    onNavigateToSettings: () -&gt; Unit = {},&#10;    shouldReset: Boolean = false,&#10;    onResetHandled: () -&gt; Unit = {}&#10;) {&#10;    val uiState by viewModel.uiState.collectAsStateWithLifecycle()&#10;    val scrollState = rememberScrollState()&#10;&#10;    // ✅ Reset lottery only when explicitly requested (when history was cleared)&#10;    LaunchedEffect(shouldReset) {&#10;        if (shouldReset) {&#10;            viewModel.resetLottery()&#10;            onResetHandled()&#10;            println(&quot;DEBUG: Lottery reset due to history being cleared&quot;)&#10;        }&#10;    }&#10;&#10;    // State cho hiệu ứng dropping balls và floating results&#10;    var droppingNumbers by remember { mutableStateOf&lt;List&lt;String&gt;&gt;(emptyList()) }&#10;    var floatingResults by remember { mutableStateOf&lt;List&lt;String&gt;&gt;(emptyList()) }&#10;    var currentPrizeName by remember { mutableStateOf(&quot;&quot;) }&#10;    var isShowingFloatingDialog by remember { mutableStateOf(false) }&#10;    var droppingColors by remember { mutableStateOf&lt;List&lt;Color&gt;&gt;(emptyList()) }&#10;    var isSpecialPrize by remember { mutableStateOf(false) }&#10;    var isViewingResults by remember { mutableStateOf(false) }&#10;&#10;    // Theo dõi số lượng kết quả để tự động scroll&#10;    val previousResultCount = remember { mutableStateOf(uiState.results.size) }&#10;    val isFirstLaunch = remember { mutableStateOf(true) }&#10;&#10;    val hasValidResults = uiState.results.isNotEmpty() &amp;&amp;&#10;            uiState.results.values.any { it.numbers.isNotEmpty() }&#10;&#10;    val hasValidSession = uiState.completedSession != null &amp;&amp;&#10;            uiState.completedSession!!.results.isNotEmpty()&#10;&#10;    // ✅ Clear all effects when lottery is reset (only when shouldReset is true)&#10;    LaunchedEffect(uiState.results.isEmpty() &amp;&amp; !uiState.isRunning, shouldReset) {&#10;        if (shouldReset &amp;&amp; uiState.results.isEmpty() &amp;&amp; !uiState.isRunning &amp;&amp; uiState.currentPrize == null) {&#10;            droppingNumbers = emptyList()&#10;            floatingResults = emptyList()&#10;            isShowingFloatingDialog = false&#10;            isViewingResults = false&#10;            droppingColors = emptyList()&#10;            currentPrizeName = &quot;&quot;&#10;            isSpecialPrize = false&#10;            println(&quot;DEBUG: All effects cleared due to explicit lottery reset&quot;)&#10;        }&#10;    }&#10;&#10;    // Enhanced result handling với dialog logic&#10;    LaunchedEffect(uiState.results.size, uiState.isRolling) {&#10;        val latestResult = uiState.results.values.lastOrNull()&#10;&#10;        if (latestResult != null &amp;&amp; !uiState.isRolling &amp;&amp; latestResult.numbers.isNotEmpty()) {&#10;            currentPrizeName = latestResult.prize.displayName&#10;            isSpecialPrize = latestResult.prize.id == &quot;special&quot;&#10;&#10;            // Xác định màu sắc theo giải&#10;            val prizeColors = List(latestResult.numbers.size) {&#10;                when {&#10;                    latestResult.prize.id == &quot;special&quot; -&gt; Color(0xFFFFD700) // Vàng&#10;                    latestResult.prize.id == &quot;first&quot; -&gt; Color(0xFFE91E63)   // Hồng&#10;                    latestResult.prize.id == &quot;second&quot; -&gt; Color(0xFF2196F3)  // Xanh dương&#10;                    latestResult.prize.id == &quot;third&quot; -&gt; Color(0xFF4CAF50)   // Xanh lá&#10;                    else -&gt; Color(0xFF4FC3F7) // Xanh nhạt&#10;                }&#10;            }&#10;&#10;            //  Phase 1: Chuẩn bị và scroll đến vị trí dropping&#10;            droppingNumbers = latestResult.numbers&#10;            droppingColors = prizeColors&#10;            isShowingFloatingDialog = false&#10;            isViewingResults = false // Reset state&#10;&#10;            //  Scroll để dropping balls hiển thị trong viewport&#10;            delay(100)&#10;            val droppingScrollTarget = when {&#10;                latestResult.numbers.size &lt;= 3 -&gt; 450&#10;                latestResult.numbers.size &lt;= 6 -&gt; 480&#10;                latestResult.numbers.size &lt;= 10 -&gt; 500&#10;                else -&gt; 520&#10;            }&#10;            scrollState.animateScrollTo(droppingScrollTarget)&#10;&#10;            //  Đợi dropping animation hoàn thành - giảm delay time để nhanh hơn&#10;            val dropDuration = when {&#10;                latestResult.numbers.size == 1 -&gt; 1200L      // 1 số: 1200L&#10;                latestResult.numbers.size &lt;= 3 -&gt; 1800L     // 2-3 số:  1800L&#10;                latestResult.numbers.size &lt;= 6 -&gt; 2200L     // 4-6 số:  2200L&#10;                latestResult.numbers.size &lt;= 10 -&gt; 2800L    // 7-10 số:  2800L&#10;                latestResult.numbers.size &lt;= 15 -&gt; 3500L    // 11-15 số:  3500L&#10;                else -&gt; 4200L                               // Nhiều số:  4200L&#10;            }&#10;            delay(dropDuration)&#10;&#10;            //  Kiểm tra nếu đang xem kết quả thì không chuyển sang floating dialog&#10;            if (!isViewingResults) {&#10;                //  Phase 2: Clear dropping, show floating dialog&#10;                droppingNumbers = emptyList()&#10;                floatingResults = latestResult.numbers&#10;                isShowingFloatingDialog = true&#10;            }&#10;        }&#10;&#10;        // Reset khi bắt đầu giải m���i&#10;        if (uiState.isRolling &amp;&amp; uiState.currentPrize != null) {&#10;            droppingNumbers = emptyList()&#10;            floatingResults = emptyList()&#10;            isShowingFloatingDialog = false&#10;            isViewingResults = false&#10;&#10;            // Scroll về lottery machine khi bắt đầu quay&#10;            delay(200)&#10;            scrollState.animateScrollTo(150)&#10;        }&#10;    }&#10;&#10;    // Auto scroll logic cho các trường hợp khác&#10;    LaunchedEffect(uiState.results.size, uiState.isRolling) {&#10;        if (isFirstLaunch.value) {&#10;            isFirstLaunch.value = false&#10;            previousResultCount.value = uiState.results.size&#10;            return@LaunchedEffect&#10;        }&#10;&#10;        // Khi reset hoàn toàn (làm mới)&#10;        if (!uiState.isRolling &amp;&amp; uiState.results.isEmpty() &amp;&amp; uiState.currentPrize == null) {&#10;            scrollState.animateScrollTo(0)&#10;            previousResultCount.value = 0&#10;        }&#10;    }&#10;&#10;    // reset khi session hoàn thành hoặc reset lottery&#10;    LaunchedEffect(uiState.completedSession, uiState.results.isEmpty()) {&#10;        if (uiState.completedSession != null || uiState.results.isEmpty()) {&#10;            isShowingFloatingDialog = false&#10;            floatingResults = emptyList()&#10;            isViewingResults = false&#10;            droppingNumbers = emptyList()&#10;        }&#10;    }&#10;&#10;    val handleNavigateToHistory = {&#10;        // ✅ Don't clear floating dialog when navigating to history - keep current state&#10;        onNavigateToHistory()&#10;    }&#10;&#10;    val handleNavigateToSettings = {&#10;        // ✅ Clear floating dialog when navigating to settings (settings might affect current session)&#10;        isShowingFloatingDialog = false&#10;        floatingResults = emptyList()&#10;        isViewingResults = false&#10;        droppingNumbers = emptyList()&#10;        droppingColors = emptyList()&#10;&#10;        onNavigateToSettings()&#10;    }&#10;&#10;&#10;    Box(&#10;        modifier = Modifier&#10;            .fillMaxSize()&#10;            .background(&#10;                brush = Brush.verticalGradient(&#10;                    colors = listOf(&#10;                        Color(0xFF0F0F23),&#10;                        Color(0xFF1A1A2E),&#10;                        Color(0xFF16213E)&#10;                    )&#10;                )&#10;            )&#10;    ) {&#10;        // Special effects overlay&#10;        SpecialEffectsOverlay(&#10;            isActive = uiState.isRolling &amp;&amp; uiState.currentPrize?.id == &quot;special&quot; &amp;&amp; !uiState.isPaused,&#10;            modifier = Modifier.fillMaxSize()&#10;        )&#10;&#10;        Column(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .windowInsetsPadding(WindowInsets.systemBars)&#10;                .verticalScroll(scrollState)&#10;                .padding(16.dp),&#10;            horizontalAlignment = Alignment.CenterHorizontally&#10;        ) {&#10;            // Header&#10;            TopHeader(&#10;                onNavigateToHistory = handleNavigateToHistory,&#10;                onNavigateToSettings = handleNavigateToSettings&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // Current prize display - compact version&#10;            AnimatedVisibility(&#10;                visible = uiState.currentPrize != null,&#10;                enter = slideInVertically() + fadeIn(),&#10;                exit = slideOutVertically() + fadeOut()&#10;            ) {&#10;                uiState.currentPrize?.let { prize -&gt;&#10;                    CurrentPrizeCard(&#10;                        prize = prize,&#10;                        isRolling = uiState.isRolling,&#10;                        isPaused = uiState.isPaused,&#10;                        progress = uiState.rollingProgress&#10;                    )&#10;                }&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(20.dp))&#10;&#10;            // Enhanced Lottery machine với số thật&#10;            LotteryBallMachine(&#10;                isRolling = uiState.isRolling &amp;&amp; !uiState.isPaused,&#10;                rollingProgress = uiState.rollingProgress,&#10;                currentNumbers = uiState.currentPrize?.let { prize -&gt;&#10;                    // Tạo danh sách số có thể trúng cho giải này&#10;                    when (prize.id) {&#10;                        &quot;special&quot; -&gt; (1..99).map { it.toString().padStart(2, '0') }.shuffled()&#10;                            .take(12)&#10;&#10;                        &quot;first&quot; -&gt; (1..99).map { it.toString().padStart(2, '0') }.shuffled()&#10;                            .take(10)&#10;&#10;                        &quot;second&quot; -&gt; (10..99).map { it.toString() }.shuffled().take(15)&#10;                        &quot;third&quot; -&gt; (100..999).map { it.toString() }.shuffled().take(20)&#10;                        else -&gt; (1..50).map { it.toString() }.shuffled().take(8)&#10;                    }&#10;                } ?: emptyList(),&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .height(300.dp)&#10;            )&#10;&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            // Control buttons&#10;            ControlButtonsSection(&#10;                uiState = uiState,&#10;                onStart = { viewModel.startLottery() },&#10;                onQuickStart = { viewModel.startLottery(withAnimation = false) },&#10;                onPause = { viewModel.pauseLottery() },&#10;                onResume = { viewModel.resumeLottery() },&#10;                onReset = {&#10;                    viewModel.resetLottery()&#10;                    // Clear effects&#10;                    droppingNumbers = emptyList()&#10;                    floatingResults = emptyList()&#10;                    isShowingFloatingDialog = false&#10;                    previousResultCount.value = 0&#10;                    isFirstLaunch.value = false&#10;                }&#10;            )&#10;&#10;            // ✅ Enhanced spacing cho dropping animation section&#10;            Spacer(modifier = Modifier.height(32.dp))&#10;&#10;            // ✅ Dropping balls animation với position tối ưu&#10;            if (droppingNumbers.isNotEmpty()) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .height(80.dp)&#10;                        .padding(horizontal = 6.dp),&#10;                    contentAlignment = Alignment.TopCenter&#10;                ) {&#10;                    DroppingBallCompleted(&#10;                        numbers = droppingNumbers,&#10;                        colors = droppingColors,&#10;                        isDropping = true,&#10;                        onAllDropsComplete = {&#10;                            // Sound effect hoặc haptic feedback có thể thêm ở đây&#10;                        },&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .height(60.dp)&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(10.dp))&#10;            }&#10;&#10;            // ✅ Spacing tối ưu trước latest result&#10;            Spacer(modifier = Modifier.height(24.dp))&#10;&#10;            // Latest result section (khi không có floating)&#10;            if (hasValidResults &amp;&amp; !uiState.isRolling &amp;&amp; !isShowingFloatingDialog) {&#10;                LatestResultSection(&#10;                    uiState = uiState,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;            }&#10;&#10;            // Results board cho nhiều giải&#10;            if ((hasValidResults &amp;&amp; uiState.results.size &gt;= 2) || hasValidSession) {&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                LotteryResultsBoard(&#10;                    results = uiState.results,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;            }&#10;&#10;            Spacer(modifier = Modifier.height(16.dp))&#10;&#10;            // Session completion info&#10;            if (hasValidSession) {&#10;                uiState.completedSession?.let { session -&gt;&#10;                    SessionCompletionCard(session = session)&#10;                }&#10;            }&#10;&#10;            // Bottom padding&#10;            Spacer(modifier = Modifier.height(120.dp))&#10;        }&#10;&#10;        // ✅ Floating Result Dialog - hiển thị như overlay&#10;        if (isShowingFloatingDialog &amp;&amp; floatingResults.isNotEmpty()) {&#10;            Dialog(&#10;                onDismissRequest = {&#10;                    if (!isViewingResults) {&#10;                        isShowingFloatingDialog = false&#10;                        floatingResults = emptyList()&#10;                    }&#10;                },&#10;                properties = DialogProperties(&#10;                    dismissOnBackPress = !isViewingResults,&#10;                    dismissOnClickOutside = !isViewingResults,&#10;                    usePlatformDefaultWidth = false&#10;                )&#10;            ) {&#10;                FloatingResultDialog(&#10;                    numbers = floatingResults,&#10;                    prizeName = currentPrizeName,&#10;                    isSpecialPrize = isSpecialPrize,&#10;                    isViewingResults = isViewingResults,&#10;                    isLastPrize = isSpecialPrize, // ✅ Giải đặc biệt là giải cuối cùng&#10;                    onViewResults = {&#10;                        isViewingResults = true&#10;                        // ✅ Thực sự pause lottery thông qua viewModel&#10;                        viewModel.pauseForViewingResults()&#10;                    },&#10;                    onContinue = {&#10;                        isShowingFloatingDialog = false&#10;                        floatingResults = emptyList()&#10;                        isViewingResults = false&#10;                        // ✅ Resume lottery để tiếp tục quay giải tiếp theo&#10;                        viewModel.resumeLottery()&#10;                    },&#10;                    onClose = {&#10;                        // ✅ Đóng dialog khi là giải cuối cùng&#10;                        isShowingFloatingDialog = false&#10;                        floatingResults = emptyList()&#10;                        isViewingResults = false&#10;                    }&#10;                )&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// ✅ Enhanced Floating Result Dialog Component&#10;@Composable&#10;private fun FloatingResultDialog(&#10;    numbers: List&lt;String&gt;,&#10;    prizeName: String,&#10;    isSpecialPrize: Boolean,&#10;    isViewingResults: Boolean,&#10;    isLastPrize: Boolean, // ✅ Thêm tham số để xác định giải có phải là giải cuối cùng không&#10;    onViewResults: () -&gt; Unit,&#10;    onContinue: () -&gt; Unit,&#10;    onClose: () -&gt; Unit,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Card(&#10;        modifier = modifier&#10;            .fillMaxWidth(0.95f)&#10;            .wrapContentHeight()&#10;            .padding(16.dp),&#10;        shape = RoundedCornerShape(24.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = Color(0xFF1A1A2E)&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 16.dp)&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .background(&#10;                    brush = if (isSpecialPrize) {&#10;                        Brush.verticalGradient(&#10;                            colors = listOf(&#10;                                Color(0xFF2D1B69).copy(alpha = 0.8f),&#10;                                Color(0xFF1A1A2E),&#10;                                Color(0xFF0F0F23)&#10;                            )&#10;                        )&#10;                    } else {&#10;                        Brush.verticalGradient(&#10;                            colors = listOf(&#10;                                Color(0xFF1E3A8A).copy(alpha = 0.6f),&#10;                                Color(0xFF1A1A2E),&#10;                                Color(0xFF0F0F23)&#10;                            )&#10;                        )&#10;                    }&#10;                )&#10;        ) {&#10;            Column(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .padding(24.dp),&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                // ✅ Enhanced header với animation&#10;                Column(&#10;                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    // Celebration icon&#10;                    Text(&#10;                        text = if (isSpecialPrize) &quot;&quot; else &quot;⭐&quot;,&#10;                        fontSize = 48.sp,&#10;                        modifier = Modifier.padding(bottom = 8.dp)&#10;                    )&#10;&#10;                    // Prize title&#10;                    Text(&#10;                        text = if (isSpecialPrize) &quot; $prizeName &quot; else &quot;✨ $prizeName ✨&quot;,&#10;                        fontSize = if (isSpecialPrize) 24.sp else 22.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = if (isSpecialPrize) LotteryGold else LotteryLightBlue,&#10;                        textAlign = TextAlign.Center,&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    // Subtitle - thay đổi theo trạng thái&#10;                    Text(&#10;                        text = if (isViewingResults) {&#10;                            if (isSpecialPrize) &quot;Đang xem giải thưởng cao nhất&quot; else &quot;Đang xem kết quả&quot;&#10;                        } else {&#10;                            if (isSpecialPrize) &quot;Chúc mừng! Giải thưởng cao nhất!&quot; else &quot;Kết quả vừa được quay!&quot;&#10;                        },&#10;                        fontSize = 14.sp,&#10;                        color = Color.White.copy(alpha = 0.8f),&#10;                        textAlign = TextAlign.Center,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                }&#10;&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;&#10;                // ✅ Enhanced FloatingResultGrid&#10;                FloatingResultGrid(&#10;                    numbers = numbers,&#10;                    prizeName = prizeName,&#10;                    isSpecialPrize = isSpecialPrize,&#10;                    isVisible = true,&#10;                    modifier = Modifier.fillMaxWidth()&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;&#10;                // ✅ Action buttons row - thay đổi theo trạng thái và loại giải&#10;                Row(&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                ) {&#10;                    if (isLastPrize) {&#10;                        // ✅ Nút &quot;Đóng&quot; cho giải đặc biệt (giải cuối cùng)&#10;                        Button(&#10;                            onClick = {&#10;                                onClose()&#10;                                println(&quot;DEBUG: Clicked Close button for special prize&quot;)&#10;                            },&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .height(48.dp),&#10;                            colors = ButtonDefaults.buttonColors(&#10;                                containerColor = LotteryGold&#10;                            ),&#10;                            shape = RoundedCornerShape(24.dp)&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Close,&#10;                                contentDescription = null,&#10;                                modifier = Modifier.size(18.dp)&#10;                            )&#10;                            Spacer(modifier = Modifier.width(6.dp))&#10;                            Text(&#10;                                text = &quot;Đóng&quot;,&#10;                                fontSize = 16.sp,&#10;                                fontWeight = FontWeight.Bold,&#10;                                color = Color.Black&#10;                            )&#10;                        }&#10;                    } else {&#10;                        // ✅ Logic cũ cho các giải khác&#10;                        if (!isViewingResults) {&#10;                            // View results button&#10;                            Button(&#10;                                onClick = {&#10;                                    onViewResults()&#10;                                    println(&quot;DEBUG: Clicked View Results button&quot;)&#10;                                },&#10;                                modifier = Modifier&#10;                                    .weight(1f)&#10;                                    .height(48.dp),&#10;                                colors = ButtonDefaults.buttonColors(&#10;                                    containerColor = LotteryLightBlue&#10;                                ),&#10;                                shape = RoundedCornerShape(24.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.Visibility,&#10;                                    contentDescription = null,&#10;                                    modifier = Modifier.size(18.dp)&#10;                                )&#10;                                Spacer(modifier = Modifier.width(6.dp))&#10;                                Text(&#10;                                    text = &quot;Xem kết quả&quot;,&#10;                                    fontSize = 16.sp,&#10;                                    fontWeight = FontWeight.Bold,&#10;                                    color = Color.White&#10;                                )&#10;                            }&#10;                        } else {&#10;                            // Continue button - hiển thị khi đang xem kết quả&#10;                            Button(&#10;                                onClick = {&#10;                                    onContinue()&#10;                                    println(&quot;DEBUG: Clicked Continue button&quot;)&#10;                                },&#10;                                modifier = Modifier&#10;                                    .weight(1f)&#10;                                    .height(48.dp),&#10;                                colors = ButtonDefaults.buttonColors(&#10;                                    containerColor = LotteryGreen&#10;                                ),&#10;                                shape = RoundedCornerShape(24.dp)&#10;                            ) {&#10;                                Icon(&#10;                                    imageVector = Icons.Default.PlayArrow,&#10;                                    contentDescription = null,&#10;                                    modifier = Modifier.size(18.dp)&#10;                                )&#10;                                Spacer(modifier = Modifier.width(6.dp))&#10;                                Text(&#10;                                    text = &quot;Tiếp tục&quot;,&#10;                                    fontSize = 16.sp,&#10;                                    fontWeight = FontWeight.Bold,&#10;                                    color = Color.White&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;&#10;                // ✅ Hint text - thay đổi theo trạng thái&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                Card(&#10;                    colors = CardDefaults.cardColors(&#10;                        containerColor = Color.White.copy(alpha = 0.05f)&#10;                    ),&#10;                    shape = RoundedCornerShape(12.dp),&#10;                    modifier = Modifier.fillMaxWidth()&#10;                ) {&#10;                    Row(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(12.dp),&#10;                        verticalAlignment = Alignment.CenterVertically,&#10;                        horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = Icons.Default.Info,&#10;                            contentDescription = null,&#10;                            tint = Color.White.copy(alpha = 0.6f),&#10;                            modifier = Modifier.size(16.dp)&#10;                        )&#10;                        Text(&#10;                            text = if (isLastPrize) {&#10;                                &quot; Tất cả giải đã hoàn thành! Nhấn 'Đóng' để kết thúc.&quot;&#10;                            } else if (isViewingResults) {&#10;                                &quot; Nhấn 'Tiếp tục' để quay giải tiếp theo&quot;&#10;                            } else {&#10;                                &quot; Nhấn 'Xem kết quả' để tạm dừng và xem chi tiết&quot;&#10;                            },&#10;                            fontSize = 12.sp,&#10;                            color = Color.White.copy(alpha = 0.6f),&#10;                            fontWeight = FontWeight.Medium,&#10;                            modifier = Modifier.weight(1f)&#10;                        )&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun LatestResultSection(&#10;    uiState: LotteryUiState,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    // hiển thị kết quả vừa quay&#10;    val latestResult = uiState.results.values.lastOrNull()&#10;&#10;    AnimatedVisibility(&#10;        visible = latestResult != null &amp;&amp; !uiState.isRolling,&#10;        enter = slideInVertically(&#10;            initialOffsetY = { fullHeight -&gt; fullHeight },&#10;            animationSpec = spring(&#10;                dampingRatio = 0.8f,&#10;                stiffness = 300f&#10;            )&#10;        ) + fadeIn(&#10;            animationSpec = spring(&#10;                dampingRatio = 0.8f,&#10;                stiffness = 300f&#10;            )&#10;        ),&#10;        exit = slideOutVertically(&#10;            targetOffsetY = { fullHeight -&gt; -fullHeight }&#10;        ) + fadeOut(),&#10;        modifier = modifier&#10;    ) {&#10;        latestResult?.let { result -&gt;&#10;            Column(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                verticalArrangement = Arrangement.spacedBy(2.dp)&#10;            ) {&#10;                // Section header - flat design như settings&#10;                Text(&#10;                    text = &quot; KẾT QUẢ VỪA QUAY&quot;,&#10;                    fontSize = 14.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = LotteryGold,&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(&#10;                            start = 16.dp,&#10;                            top = 8.dp,&#10;                            bottom = 8.dp&#10;                        )&#10;                )&#10;&#10;                // Main result item - flat design như settings item&#10;                Surface(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .animateContentSize(&#10;                            animationSpec = spring(&#10;                                dampingRatio = 0.7f,&#10;                                stiffness = 400f&#10;                            )&#10;                        ),&#10;                    color = Color(0xFF2C2C2C),&#10;                    shape = RoundedCornerShape(12.dp)&#10;                ) {&#10;                    Column(&#10;                        modifier = Modifier&#10;                            .fillMaxWidth()&#10;                            .padding(horizontal = 16.dp, vertical = 16.dp)&#10;                    ) {&#10;                        // Prize header row - giống style settings item&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            horizontalArrangement = Arrangement.SpaceBetween,&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Row(&#10;                                verticalAlignment = Alignment.CenterVertically,&#10;                                horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;                            ) {&#10;                                // Prize icon box - giống settings icon box&#10;                                Box(&#10;                                    modifier = Modifier&#10;                                        .size(48.dp)&#10;                                        .clip(RoundedCornerShape(12.dp))&#10;                                        .background(&#10;                                            if (result.prize.id == &quot;special&quot;) {&#10;                                                LotteryGold.copy(alpha = 0.2f)&#10;                                            } else {&#10;                                                LotteryLightBlue.copy(alpha = 0.2f)&#10;                                            }&#10;                                        ),&#10;                                    contentAlignment = Alignment.Center&#10;                                ) {&#10;                                    Icon(&#10;                                        imageVector = if (result.prize.id == &quot;special&quot;) {&#10;                                            Icons.Default.EmojiEvents&#10;                                        } else {&#10;                                            Icons.Default.Star&#10;                                        },&#10;                                        contentDescription = null,&#10;                                        tint = if (result.prize.id == &quot;special&quot;) {&#10;                                            LotteryGold&#10;                                        } else {&#10;                                            LotteryLightBlue&#10;                                        },&#10;                                        modifier = Modifier.size(24.dp)&#10;                                    )&#10;                                }&#10;&#10;                                // Prize info - giống settings text layout&#10;                                Column {&#10;                                    Text(&#10;                                        text = result.prize.name,&#10;                                        fontSize = 17.sp,&#10;                                        fontWeight = FontWeight.SemiBold,&#10;                                        color = Color.White&#10;                                    )&#10;                                    Text(&#10;                                        text = &quot;Vừa hoàn thành • ${result.numbers.size} số&quot;,&#10;                                        fontSize = 14.sp,&#10;                                        color = Color.White.copy(alpha = 0.7f),&#10;                                        lineHeight = 18.sp&#10;                                    )&#10;                                }&#10;                            }&#10;&#10;                            // Badge - style settings&#10;                            if (result.prize.id == &quot;special&quot;) {&#10;                                Box(&#10;                                    modifier = Modifier&#10;                                        .background(&#10;                                            brush = Brush.horizontalGradient(&#10;                                                colors = listOf(LotteryGold, Color(0xFFFFE55C))&#10;                                            ),&#10;                                            shape = RoundedCornerShape(8.dp)&#10;                                        )&#10;                                        .padding(horizontal = 8.dp, vertical = 4.dp)&#10;                                ) {&#10;                                    Text(&#10;                                        text = &quot;ĐẶC BIỆT&quot;,&#10;                                        fontSize = 10.sp,&#10;                                        fontWeight = FontWeight.Bold,&#10;                                        color = Color.Black&#10;                                    )&#10;                                }&#10;                            } else {&#10;                                Box(&#10;                                    modifier = Modifier&#10;                                        .background(&#10;                                            color = LotteryGreen,&#10;                                            shape = RoundedCornerShape(8.dp)&#10;                                        )&#10;                                        .padding(horizontal = 6.dp, vertical = 2.dp)&#10;                                ) {&#10;                                    Text(&#10;                                        text = &quot;MỚI&quot;,&#10;                                        fontSize = 10.sp,&#10;                                        fontWeight = FontWeight.Bold,&#10;                                        color = Color.White&#10;                                    )&#10;                                }&#10;                            }&#10;                        }&#10;&#10;                        Spacer(modifier = Modifier.height(16.dp))&#10;&#10;                        // Enhanced Numbers display với design đẹp hơn&#10;                        LazyRow(&#10;                            horizontalArrangement = Arrangement.spacedBy(12.dp),&#10;                            contentPadding = PaddingValues(horizontal = 4.dp),&#10;                            modifier = Modifier.fillMaxWidth()&#10;                        ) {&#10;                            items(result.numbers.size) { index -&gt;&#10;                                val number = result.numbers[index]&#10;&#10;                                // Staggered animation cho latest result&#10;                                var isNumberVisible by remember { mutableStateOf(false) }&#10;&#10;                                LaunchedEffect(index) {&#10;                                    delay(index * 150L) // Staggered delay&#10;                                    isNumberVisible = true&#10;                                }&#10;&#10;                                AnimatedVisibility(&#10;                                    visible = isNumberVisible,&#10;                                    enter = fadeIn(&#10;                                        animationSpec = spring(dampingRatio = Spring.DampingRatioMediumBouncy)&#10;                                    ) + slideInVertically(&#10;                                        initialOffsetY = { it },&#10;                                        animationSpec = spring(dampingRatio = Spring.DampingRatioMediumBouncy)&#10;                                    )&#10;                                ) {&#10;                                    //  Enhanced lottery ball với size và spacing tốt hơn&#10;                                    Box(&#10;                                        modifier = Modifier&#10;                                            .size(56.dp) // Tăng size để tránh vỡ số&#10;                                            .clip(CircleShape) // Dùng CircleShape cho hình tròn hoàn hảo&#10;                                            .background(&#10;                                                brush = if (result.prize.id == &quot;special&quot;) {&#10;                                                    // Gradient đặc biệt cho giải đặc biệt&#10;                                                    Brush.radialGradient(&#10;                                                        colors = listOf(&#10;                                                            Color(0xFFFFD700), // Vàng sáng&#10;                                                            Color(0xFFFFB300), // Vàng đậm&#10;                                                            Color(0xFFFF8F00)  // Cam vàng&#10;                                                        ),&#10;                                                        radius = 60f&#10;                                                    )&#10;                                                } else {&#10;                                                    // Gradient cho giải thường&#10;                                                    Brush.radialGradient(&#10;                                                        colors = listOf(&#10;                                                            Color(0xFFFFD700), // Vàng sáng&#10;                                                            Color(0xFFFFA500), // Cam vàng&#10;                                                            Color(0xFFFF7043)  // Cam đậm&#10;                                                        ),&#10;                                                        radius = 50f&#10;                                                    )&#10;                                                }&#10;                                            )&#10;                                            // Thêm shadow effect&#10;                                            .let { baseModifier -&gt;&#10;                                                if (result.prize.id == &quot;special&quot;) {&#10;                                                    baseModifier.background(&#10;                                                        brush = Brush.radialGradient(&#10;                                                            colors = listOf(&#10;                                                                Color.Transparent,&#10;                                                                LotteryGold.copy(alpha = 0.3f)&#10;                                                            ),&#10;                                                            radius = 70f&#10;                                                        ),&#10;                                                        shape = CircleShape&#10;                                                    )&#10;                                                } else baseModifier&#10;                                            },&#10;                                        contentAlignment = Alignment.Center&#10;                                    ) {&#10;                                        // Text với font size phù hợp&#10;                                        Text(&#10;                                            text = number,&#10;                                            fontSize = when {&#10;                                                number.length &gt;= 5 -&gt; 14.sp // Số dài&#10;                                                number.length &gt;= 3 -&gt; 16.sp // Số trung bình&#10;                                                else -&gt; 18.sp // Số ngắn&#10;                                            },&#10;                                            fontWeight = FontWeight.Bold,&#10;                                            color = Color.Black,&#10;                                            textAlign = TextAlign.Center,&#10;                                            maxLines = 1,&#10;                                            //  Đảm bảo text không bị overflow&#10;                                            modifier = Modifier.wrapContentSize()&#10;                                        )&#10;&#10;                                        //  Thêm highlight effect cho giải đặc biệt&#10;                                        if (result.prize.id == &quot;special&quot;) {&#10;                                            Box(&#10;                                                modifier = Modifier&#10;                                                    .size(64.dp)&#10;                                                    .clip(CircleShape)&#10;                                                    .background(&#10;                                                        brush = Brush.radialGradient(&#10;                                                            colors = listOf(&#10;                                                                Color.Transparent,&#10;                                                                LotteryGold.copy(alpha = 0.2f)&#10;                                                            )&#10;                                                        )&#10;                                                    )&#10;                                            )&#10;                                        }&#10;                                    }&#10;                                }&#10;                            }&#10;                        }&#10;&#10;                        Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                        // Bottom info row - giống settings description&#10;                        Row(&#10;                            modifier = Modifier.fillMaxWidth(),&#10;                            horizontalArrangement = Arrangement.SpaceBetween,&#10;                            verticalAlignment = Alignment.CenterVertically&#10;                        ) {&#10;                            Text(&#10;                                text = &quot; Kết quả:&quot;,&#10;                                fontSize = 14.sp,&#10;                                color = Color.White.copy(alpha = 0.7f),&#10;                                fontWeight = FontWeight.Medium&#10;                            )&#10;&#10;                            Text(&#10;                                text = &quot;Quay thành công ${result.numbers.size} số&quot;,&#10;                                fontSize = 14.sp,&#10;                                color = LotteryGold,&#10;                                fontWeight = FontWeight.Medium&#10;                            )&#10;                        }&#10;                    }&#10;                }&#10;&#10;                // Special prize celebration - flat design&#10;                if (result.prize.id == &quot;special&quot;) {&#10;                    Surface(&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        color = Color(0xFF2D1B69).copy(alpha = 0.3f),&#10;                        shape = RoundedCornerShape(0.dp)&#10;                    ) {&#10;                        Row(&#10;                            modifier = Modifier&#10;                                .fillMaxWidth()&#10;                                .padding(horizontal = 16.dp, vertical = 16.dp)&#10;                                .animateContentSize(),&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            horizontalArrangement = Arrangement.spacedBy(16.dp)&#10;                        ) {&#10;                            // Celebration icon&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .size(48.dp)&#10;                                    .clip(RoundedCornerShape(12.dp))&#10;                                    .background(LotteryGold.copy(alpha = 0.2f)),&#10;                                contentAlignment = Alignment.Center&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;&quot;,&#10;                                    fontSize = 24.sp&#10;                                )&#10;                            }&#10;&#10;                            // Celebration message&#10;                            Column(&#10;                                modifier = Modifier.weight(1f)&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;Chúc mừng!&quot;,&#10;                                    fontSize = 17.sp,&#10;                                    fontWeight = FontWeight.SemiBold,&#10;                                    color = LotteryGold&#10;                                )&#10;                                Text(&#10;                                    text = &quot;Bạn đã trúng giải đặc biệt - giải thưởng cao nhất!&quot;,&#10;                                    fontSize = 14.sp,&#10;                                    color = Color.White.copy(alpha = 0.8f),&#10;                                    lineHeight = 18.sp&#10;                                )&#10;                            }&#10;&#10;                            // Celebration badge&#10;                            Box(&#10;                                modifier = Modifier&#10;                                    .background(&#10;                                        brush = Brush.horizontalGradient(&#10;                                            colors = listOf(LotteryGold, Color(0xFFFFE55C))&#10;                                        ),&#10;                                        shape = RoundedCornerShape(8.dp)&#10;                                    )&#10;                                    .padding(horizontal = 8.dp, vertical = 4.dp)&#10;                            ) {&#10;                                Text(&#10;                                    text = &quot;XUẤT SẮC&quot;,&#10;                                    fontSize = 10.sp,&#10;                                    fontWeight = FontWeight.Bold,&#10;                                    color = Color.Black&#10;                                )&#10;                            }&#10;                        }&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun TopHeader(&#10;    onNavigateToHistory: () -&gt; Unit = {},&#10;    onNavigateToSettings: () -&gt; Unit = {}&#10;) {&#10;    var showDropdownMenu by remember { mutableStateOf(false) }&#10;    var showAboutDialog by remember { mutableStateOf(false) }&#10;    Row(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        horizontalArrangement = Arrangement.SpaceBetween,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Text(&#10;            text = &quot;XỔ SỐ MAY MẮN&quot;,&#10;            fontSize = 22.sp,&#10;            fontWeight = FontWeight.Bold,&#10;            color = LotteryGold&#10;        )&#10;&#10;        Box {&#10;            IconButton(&#10;                onClick = { showDropdownMenu = true },&#10;                modifier = Modifier&#10;                    .size(40.dp)&#10;                    .background(&#10;                        color = Color.White.copy(alpha = 0.1f),&#10;                        shape = CircleShape&#10;                    )&#10;            ) {&#10;                Icon(&#10;                    imageVector = Icons.Default.Settings,&#10;                    contentDescription = &quot;Cài đặt&quot;,&#10;                    tint = Color.White,&#10;                    modifier = Modifier.size(20.dp)&#10;                )&#10;            }&#10;            //dropdown menu&#10;            DropdownMenu(&#10;                expanded = showDropdownMenu,&#10;                onDismissRequest = { showDropdownMenu = false },&#10;                modifier = Modifier.background(&#10;                    color = Color(0xFF1A1A2E),&#10;                    shape = RoundedCornerShape(12.dp)&#10;                )&#10;            ) {&#10;                // history menu item&#10;                DropdownMenuItem(&#10;                    text = {&#10;                        Row(&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.History,&#10;                                contentDescription = null,&#10;                                tint = LotteryGold,&#10;                                modifier = Modifier.size(20.dp)&#10;                            )&#10;                            Text(&#10;                                text = &quot;Lịch sử&quot;,&#10;                                color = Color.White,&#10;                                fontSize = 16.sp,&#10;                                fontWeight = FontWeight.Medium&#10;                            )&#10;                        }&#10;                    },&#10;                    onClick = {&#10;                        showDropdownMenu = false&#10;                        onNavigateToHistory()&#10;                    },&#10;                    modifier = Modifier.padding(horizontal = 4.dp)&#10;                )&#10;&#10;                // divider&#10;                HorizontalDivider(&#10;                    color = Color.White.copy(alpha = 0.2f),&#10;                    thickness = 1.dp,&#10;                    modifier = Modifier.padding(horizontal = 12.dp)&#10;                )&#10;                //Settings menu item&#10;                DropdownMenuItem(&#10;                    text = {&#10;                        Row(&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Settings,&#10;                                contentDescription = null,&#10;                                tint = LotteryGold,&#10;                                modifier = Modifier.size(20.dp)&#10;                            )&#10;&#10;                            Text(&#10;                                text = &quot;Cài đặt&quot;,&#10;                                color = Color.White,&#10;                                fontSize = 16.sp,&#10;                                fontWeight = FontWeight.Medium&#10;                            )&#10;                        }&#10;                    }, onClick = {&#10;                        showDropdownMenu = false&#10;                        onNavigateToSettings()&#10;                    },&#10;                    modifier = Modifier.padding(horizontal = 4.dp)&#10;                )&#10;&#10;                // Thêm các menu item khác nếu cần&#10;                HorizontalDivider(&#10;                    color = Color.White.copy(alpha = 0.2f),&#10;                    thickness = 1.dp,&#10;                    modifier = Modifier.padding(horizontal = 12.dp)&#10;                )&#10;&#10;                // about menu item&#10;                DropdownMenuItem(&#10;                    text = {&#10;                        Row(&#10;                            verticalAlignment = Alignment.CenterVertically,&#10;                            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;                        ) {&#10;                            Icon(&#10;                                imageVector = Icons.Default.Info,&#10;                                contentDescription = null,&#10;                                tint = LotteryGold,&#10;                                modifier = Modifier.size(20.dp)&#10;                            )&#10;                            Text(&#10;                                text = &quot;Về ứng dụng&quot;,&#10;                                color = Color.White,&#10;                                fontSize = 16.sp,&#10;                                fontWeight = FontWeight.Medium&#10;                            )&#10;                        }&#10;                    },&#10;                    onClick = {&#10;                        showDropdownMenu = false&#10;                        showAboutDialog = true&#10;                    },&#10;                    modifier = Modifier.padding(horizontal = 4.dp)&#10;                )&#10;            }&#10;        }&#10;    }&#10;&#10;    if (showAboutDialog) {&#10;        AboutDialog(onDismiss = { showAboutDialog = false })&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun AboutDialog(onDismiss: () -&gt; Unit) {&#10;    AlertDialog(&#10;        onDismissRequest = onDismiss,&#10;        title = {&#10;            Column(&#10;                horizontalAlignment = Alignment.CenterHorizontally,&#10;                modifier = Modifier.fillMaxWidth()&#10;            ) {&#10;                Box(&#10;                    modifier = Modifier&#10;                        .size(80.dp)&#10;                        .clip(RoundedCornerShape(20.dp))&#10;                        .background(&#10;                            Brush.radialGradient(&#10;                                colors = listOf(&#10;                                    LotteryGold.copy(alpha = 0.3f),&#10;                                    LotteryGold.copy(alpha = 0.1f)&#10;                                )&#10;                            )&#10;                        ),&#10;                    contentAlignment = Alignment.Center&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.EmojiEvents,&#10;                        contentDescription = null,&#10;                        tint = LotteryGold,&#10;                        modifier = Modifier.size(48.dp)&#10;                    )&#10;                }&#10;                Spacer(modifier = Modifier.height(16.dp))&#10;                Text(&#10;                    text = &quot;Random Lucky&quot;,&#10;                    fontSize = 24.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = LotteryGold&#10;                )&#10;            }&#10;        },&#10;        text = {&#10;            Column {&#10;                Text(&#10;                    text = &quot;Ứng dụng xổ số may mắn hàng đầu Việt Nam&quot;,&#10;                    fontSize = 16.sp,&#10;                    fontWeight = FontWeight.Medium,&#10;                    textAlign = TextAlign.Center,&#10;                    modifier = Modifier.fillMaxWidth(),&#10;                    color = Color.Gray&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;&#10;                InfoRow(&quot;Phiên bản&quot;, &quot;1.0.0&quot;, LotteryLightBlue)&#10;                InfoRow(&quot;Nhà phát triển&quot;, &quot;TravisHuy&quot;, LotteryGreen)&#10;                InfoRow(&quot;Ngày phát hành&quot;, &quot;02/08/2025&quot;, LotteryPurple)&#10;                InfoRow(&quot;Nền tảng&quot;, &quot;Android&quot;, LotteryOrange)&#10;&#10;                Spacer(modifier = Modifier.height(24.dp))&#10;&#10;                Box(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .clip(RoundedCornerShape(12.dp))&#10;                        .background(LotteryGold.copy(alpha = 0.1f))&#10;                        .padding(16.dp)&#10;                ) {&#10;                    Text(&#10;                        text = &quot; Cảm ơn bạn đã tin tưởng và sử dụng Random Lucky!&quot;,&#10;                        fontSize = 14.sp,&#10;                        textAlign = TextAlign.Center,&#10;                        modifier = Modifier.fillMaxWidth(),&#10;                        color = LotteryGold,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                }&#10;            }&#10;        },&#10;        confirmButton = {&#10;            TextButton(&#10;                onClick = onDismiss,&#10;                colors = ButtonDefaults.textButtonColors(&#10;                    contentColor = LotteryGold&#10;                )&#10;            ) {&#10;                Text(&#10;                    &quot;Đóng&quot;,&#10;                    fontWeight = FontWeight.SemiBold&#10;                )&#10;            }&#10;        },&#10;        containerColor = Color(0xFF1E1E2E),&#10;        shape = RoundedCornerShape(20.dp)&#10;    )&#10;}&#10;&#10;@Composable&#10;private fun InfoRow(label: String, value: String, color: Color = LotteryGold) {&#10;    Row(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .padding(vertical = 6.dp),&#10;        horizontalArrangement = Arrangement.SpaceBetween,&#10;        verticalAlignment = Alignment.CenterVertically&#10;    ) {&#10;        Text(&#10;            text = label,&#10;            fontSize = 15.sp,&#10;            color = Color.Gray,&#10;            fontWeight = FontWeight.Medium&#10;        )&#10;        Text(&#10;            text = value,&#10;            fontSize = 15.sp,&#10;            fontWeight = FontWeight.SemiBold,&#10;            color = color&#10;        )&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun CurrentPrizeCard(&#10;    prize: com.nhathuy.randomlucky.domain.model.LotteryPrize,&#10;    isRolling: Boolean,&#10;    isPaused: Boolean,&#10;    progress: Float&#10;) {&#10;    Card(&#10;        modifier = Modifier&#10;            .fillMaxWidth()&#10;            .height(140.dp),&#10;        shape = RoundedCornerShape(20.dp),&#10;        colors = CardDefaults.cardColors(&#10;            containerColor = if (prize.id == &quot;special&quot;) {&#10;                Color(0xFF2D1B69)&#10;            } else {&#10;                Color(0xFF1E3A8A)&#10;            }&#10;        ),&#10;        elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)&#10;    ) {&#10;        Box(&#10;            modifier = Modifier&#10;                .fillMaxSize()&#10;                .padding(16.dp),&#10;            contentAlignment = Alignment.Center&#10;        ) {&#10;            Column(&#10;                horizontalAlignment = Alignment.CenterHorizontally&#10;            ) {&#10;                // Status text&#10;                Text(&#10;                    text = when {&#10;                        isPaused -&gt; &quot;⏸️ TẠM DỪNG&quot;&#10;                        isRolling -&gt; &quot; ĐANG QUAY&quot;&#10;                        else -&gt; &quot;⭐ CHUẨN BỊ&quot;&#10;                    },&#10;                    fontSize = 14.sp,&#10;                    color = when {&#10;                        isPaused -&gt; LotteryOrange&#10;                        else -&gt; Color.White.copy(alpha = 0.8f)&#10;                    },&#10;                    letterSpacing = 1.sp,&#10;                    fontWeight = FontWeight.Medium&#10;                )&#10;&#10;                Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                // Prize name&#10;                Text(&#10;                    text = prize.displayName,&#10;                    fontSize = if (prize.id == &quot;special&quot;) 26.sp else 22.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = if (prize.id == &quot;special&quot;) LotteryGold else Color.White,&#10;                    textAlign = TextAlign.Center,&#10;                    maxLines = 1&#10;                )&#10;&#10;                // Progress indicator&#10;                if (isRolling &amp;&amp; !isPaused) {&#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;                    LinearProgressIndicator(&#10;                        progress = progress,&#10;                        modifier = Modifier&#10;                            .width(120.dp)&#10;                            .height(6.dp)&#10;                            .clip(RoundedCornerShape(3.dp)),&#10;                        color = LotteryGold,&#10;                        trackColor = Color.White.copy(alpha = 0.3f)&#10;                    )&#10;&#10;                    Text(&#10;                        text = &quot;${(progress * 100).toInt()}%&quot;,&#10;                        fontSize = 12.sp,&#10;                        color = LotteryGold,&#10;                        fontWeight = FontWeight.Medium,&#10;                        modifier = Modifier.padding(top = 4.dp)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;// Giữ nguyên ControlButtonsSection từ version cũ&#10;@Composable&#10;private fun ControlButtonsSection(&#10;    uiState: LotteryUiState,&#10;    onStart: () -&gt; Unit,&#10;    onQuickStart: () -&gt; Unit,&#10;    onPause: () -&gt; Unit,&#10;    onResume: () -&gt; Unit,&#10;    onReset: () -&gt; Unit&#10;) {&#10;    Column(&#10;        modifier = Modifier.fillMaxWidth(),&#10;        verticalArrangement = Arrangement.spacedBy(12.dp)&#10;    ) {&#10;        // Main control buttons&#10;        Row(&#10;            modifier = Modifier.fillMaxWidth(),&#10;            horizontalArrangement = Arrangement.spacedBy(12.dp)&#10;        ) {&#10;            // Primary action button&#10;            Button(&#10;                onClick = {&#10;                    when {&#10;                        uiState.isPaused -&gt; onResume()&#10;                        uiState.isRunning -&gt; onReset()&#10;                        else -&gt; onStart()&#10;                    }&#10;                },&#10;                modifier = Modifier&#10;                    .weight(1f)&#10;                    .height(52.dp),&#10;                colors = ButtonDefaults.buttonColors(&#10;                    containerColor = when {&#10;                        uiState.isPaused -&gt; LotteryGreen&#10;                        uiState.isRunning -&gt; LotteryRed&#10;                        else -&gt; LotteryGold&#10;                    }&#10;                ),&#10;                shape = RoundedCornerShape(26.dp),&#10;                elevation = ButtonDefaults.buttonElevation(defaultElevation = 4.dp)&#10;            ) {&#10;                Icon(&#10;                    imageVector = when {&#10;                        uiState.isPaused -&gt; Icons.Default.PlayArrow&#10;                        uiState.isRunning -&gt; Icons.Default.Refresh&#10;                        else -&gt; Icons.Default.PlayArrow&#10;                    },&#10;                    contentDescription = null,&#10;                    modifier = Modifier.size(20.dp)&#10;                )&#10;                Spacer(modifier = Modifier.width(8.dp))&#10;                Text(&#10;                    text = when {&#10;                        uiState.isPaused -&gt; &quot;Tiếp tục&quot;&#10;                        uiState.isRunning -&gt; &quot;Làm mới&quot;&#10;                        else -&gt; &quot;Bắt đầu&quot;&#10;                    },&#10;                    fontSize = 16.sp,&#10;                    fontWeight = FontWeight.Bold,&#10;                    color = Color.Black&#10;                )&#10;            }&#10;&#10;            // Quick draw button (only when not running)&#10;            if (!uiState.isRunning) {&#10;                OutlinedButton(&#10;                    onClick = onQuickStart,&#10;                    modifier = Modifier&#10;                        .weight(1f)&#10;                        .height(52.dp),&#10;                    shape = RoundedCornerShape(26.dp),&#10;                    colors = ButtonDefaults.outlinedButtonColors(&#10;                        containerColor = Color.White.copy(alpha = 0.1f),&#10;                        contentColor = Color.White&#10;                    ),&#10;                    border = ButtonDefaults.outlinedButtonBorder.copy(&#10;                        brush = Brush.linearGradient(&#10;                            colors = listOf(LotteryGold, Color.White)&#10;                        )&#10;                    )&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.FastForward,&#10;                        contentDescription = null,&#10;                        modifier = Modifier.size(18.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.width(6.dp))&#10;                    Text(&#10;                        text = &quot;Nhanh&quot;,&#10;                        fontSize = 14.sp,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // Enhanced secondary control buttons - hiển thị khi đang chạy HOẶC có kết quả và không hoàn thành&#10;        AnimatedVisibility(&#10;            visible = uiState.isRunning || (uiState.results.isNotEmpty() &amp;&amp; uiState.completedSession == null),&#10;            enter = slideInVertically() + fadeIn(),&#10;            exit = slideOutVertically() + fadeOut()&#10;        ) {&#10;            Row(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;            ) {&#10;                // Pause button - hiển thị khi đang rolling HOẶC có kết quả và session chưa hoàn thành&#10;                if (uiState.canPause || (!uiState.isRolling &amp;&amp; uiState.results.isNotEmpty() &amp;&amp; uiState.completedSession == null)) {&#10;                    Button(&#10;                        onClick = {&#10;                            if (uiState.isRolling) {&#10;                                onPause() // T��m dừng khi đang quay&#10;                            } else {&#10;                                // Tạm dừng để xem kết quả - logic này sẽ được handle trong ViewModel&#10;                                onPause()&#10;                            }&#10;                        },&#10;                        modifier = Modifier&#10;                            .weight(1f)&#10;                            .height(44.dp),&#10;                        colors = ButtonDefaults.buttonColors(&#10;                            containerColor = if (uiState.isRolling) LotteryOrange else LotteryLightBlue&#10;                        ),&#10;                        shape = RoundedCornerShape(22.dp)&#10;                    ) {&#10;                        Icon(&#10;                            imageVector = if (uiState.isRolling) Icons.Default.Pause else Icons.Default.Visibility,&#10;                            contentDescription = null,&#10;                            modifier = Modifier.size(16.dp)&#10;                        )&#10;                        Spacer(modifier = Modifier.width(6.dp))&#10;                        Text(&#10;                            text = if (uiState.isRolling) &quot;Tạm dừng&quot; else &quot;Xem kết quả&quot;,&#10;                            fontSize = 13.sp,&#10;                            fontWeight = FontWeight.Medium,&#10;                            color = Color.White&#10;                        )&#10;                    }&#10;                }&#10;&#10;                // Stop button - luôn hiển thị khi có activity&#10;                OutlinedButton(&#10;                    onClick = onReset,&#10;                    modifier = Modifier&#10;                        .weight(1f)&#10;                        .height(44.dp),&#10;                    shape = RoundedCornerShape(22.dp),&#10;                    colors = ButtonDefaults.outlinedButtonColors(&#10;                        contentColor = LotteryRed&#10;                    )&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Stop,&#10;                        contentDescription = null,&#10;                        modifier = Modifier.size(16.dp)&#10;                    )&#10;                    Spacer(modifier = Modifier.width(6.dp))&#10;                    Text(&#10;                        text = &quot;Dừng&quot;,&#10;                        fontSize = 13.sp,&#10;                        fontWeight = FontWeight.Medium&#10;                    )&#10;                }&#10;            }&#10;        }&#10;&#10;        // Result viewing hint - hiển thị khi có kết quả mới&#10;        if (!uiState.isRolling &amp;&amp; uiState.results.isNotEmpty() &amp;&amp; uiState.completedSession == null) {&#10;            Card(&#10;                modifier = Modifier.fillMaxWidth(),&#10;                shape = RoundedCornerShape(12.dp),&#10;                colors = CardDefaults.cardColors(&#10;                    containerColor = LotteryGold.copy(alpha = 0.1f)&#10;                )&#10;            ) {&#10;                Row(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(12.dp),&#10;                    verticalAlignment = Alignment.CenterVertically,&#10;                    horizontalArrangement = Arrangement.spacedBy(8.dp)&#10;                ) {&#10;                    Icon(&#10;                        imageVector = Icons.Default.Info,&#10;                        contentDescription = null,&#10;                        tint = LotteryGold,&#10;                        modifier = Modifier.size(16.dp)&#10;                    )&#10;                    Text(&#10;                        text = &quot;✨ Kết quả đã s��n sàng! Bạn có thể xem kết quả hoặc tiếp tục quay giải tiếp theo.&quot;,&#10;                        fontSize = 12.sp,&#10;                        color = LotteryGold,&#10;                        fontWeight = FontWeight.Medium,&#10;                        modifier = Modifier.weight(1f)&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;&#10;@Composable&#10;private fun SessionCompletionCard(&#10;    session: LotterySession,&#10;    modifier: Modifier = Modifier&#10;) {&#10;    Box(&#10;        modifier = modifier.fillMaxWidth(),&#10;        contentAlignment = Alignment.Center&#10;    ) {&#10;        Card(&#10;            modifier = Modifier&#10;                .fillMaxWidth()&#10;                .wrapContentHeight(),&#10;            shape = RoundedCornerShape(16.dp),&#10;            colors = CardDefaults.cardColors(&#10;                containerColor = Color(0xFF1A237E).copy(alpha = 0.8f)&#10;            ),&#10;            elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)&#10;        ) {&#10;            // Thêm gradient background overlay&#10;            Box(&#10;                modifier = Modifier&#10;                    .fillMaxWidth()&#10;                    .background(&#10;                        brush = Brush.horizontalGradient(&#10;                            colors = listOf(&#10;                                LotteryGold.copy(alpha = 0.1f),&#10;                                LotteryPurple.copy(alpha = 0.1f),&#10;                                Color(0xFF1E88E5).copy(alpha = 0.1f)&#10;                            )&#10;                        )&#10;                    )&#10;            ) {&#10;                Column(&#10;                    modifier = Modifier&#10;                        .fillMaxWidth()&#10;                        .padding(20.dp),&#10;                    horizontalAlignment = Alignment.CenterHorizontally,&#10;                    verticalArrangement = Arrangement.Center&#10;                ) {&#10;                    // Icon và title với hiệu ứng shimmer&#10;                    Text(&#10;                        text = &quot; HOÀN TẤT! &quot;,&#10;                        fontSize = 20.sp,&#10;                        fontWeight = FontWeight.Bold,&#10;                        color = LotteryGold, // Giữ màu vàng nổi bật&#10;                        textAlign = TextAlign.Center,&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(12.dp))&#10;&#10;                    // Mô tả với màu sáng hơn&#10;                    Text(&#10;                        text = &quot;Tất cả các giải đã được quay xong&quot;,&#10;                        fontSize = 14.sp,&#10;                        fontWeight = FontWeight.Medium,&#10;                        color = Color.White.copy(alpha = 0.9f), // Tăng độ sáng&#10;                        textAlign = TextAlign.Center,&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    )&#10;&#10;                    Spacer(modifier = Modifier.height(8.dp))&#10;&#10;                    // Mã session với màu accent&#10;                    Text(&#10;                        text = &quot;Mã: ${session.id.take(8)}&quot;,&#10;                        fontSize = 12.sp,&#10;                        fontWeight = FontWeight.Normal,&#10;                        color = LotteryGold.copy(alpha = 0.7f),&#10;                        textAlign = TextAlign.Center,&#10;                        modifier = Modifier.fillMaxWidth()&#10;                    )&#10;                }&#10;            }&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/src/main/java/com/nhathuy/randomlucky/presentation/viewmodel/LotteryViewModel.kt">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/src/main/java/com/nhathuy/randomlucky/presentation/viewmodel/LotteryViewModel.kt" />
              <option name="originalContent" value="package com.nhathuy.randomlucky.presentation.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.nhathuy.randomlucky.data.sound.SettingManager&#10;import com.nhathuy.randomlucky.data.sound.SoundManager&#10;import com.nhathuy.randomlucky.domain.model.LotteryPrize&#10;import com.nhathuy.randomlucky.domain.model.LotteryResult&#10;import com.nhathuy.randomlucky.domain.repository.LotteryRepository&#10;import com.nhathuy.randomlucky.domain.usecase.RunLotterySessionUseCase&#10;import com.nhathuy.randomlucky.presentation.state.LotteryUiState&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.Job&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.flow.launchIn&#10;import kotlinx.coroutines.flow.onEach&#10;import kotlinx.coroutines.flow.update&#10;import kotlinx.coroutines.launch&#10;import java.util.UUID&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class LotteryViewModel @Inject constructor(&#10;    private val runLotterySession: RunLotterySessionUseCase,&#10;    private val soundManager: SoundManager,&#10;    private val settingsManager: SettingManager,&#10;    private val lotteryRepository: LotteryRepository&#10;) : ViewModel() {&#10;    private val _uiState = MutableStateFlow(LotteryUiState())&#10;    val uiState: StateFlow&lt;LotteryUiState&gt; = _uiState.asStateFlow()&#10;&#10;    val isSoundEnabled = settingsManager.isSoundEnabled&#10;    val isVibrationEnabled = settingsManager.isVibrationEnabled&#10;    val isDarkModeEnabled = settingsManager.isDarkModeEnabled&#10;&#10;    private var currentLotteryJob: Job? = null&#10;    private var currentSessionId: String? = null&#10;    private var pausedAtPrizeIndex: Int = 0&#10;&#10;    // ✅ Track current session to compare with repository&#10;    private val prizes = listOf(&#10;        LotteryPrize(&quot;eighth&quot;, &quot;Giải Tám&quot;, &quot;Giải Tám&quot;, 1, 2, 4000L),&#10;        LotteryPrize(&quot;seventh&quot;, &quot;Giải Bảy&quot;, &quot;Giải Bảy&quot;, 1, 3, 4500L),&#10;        LotteryPrize(&quot;sixth&quot;, &quot;Giải Sáu&quot;, &quot;Giải Sáu&quot;, 3, 4, 5500L),&#10;        LotteryPrize(&quot;fifth&quot;, &quot;Giải Năm&quot;, &quot;Giải Năm&quot;, 1, 4, 5000L),&#10;        LotteryPrize(&quot;fourth&quot;, &quot;Giải Tư&quot;, &quot;Giải Tư&quot;, 7, 5, 8000L),&#10;        LotteryPrize(&quot;third&quot;, &quot;Giải Ba&quot;, &quot;Giải Ba&quot;, 2, 5, 5500L),&#10;        LotteryPrize(&quot;second&quot;, &quot;Giải Hai&quot;, &quot;Giải Hai&quot;, 1, 5, 4500L),&#10;        LotteryPrize(&quot;first&quot;, &quot;Giải Nhất&quot;, &quot;Giải Nhất&quot;, 1, 5, 5000L),&#10;        LotteryPrize(&quot;special&quot;, &quot;Giải Đặc Biệt&quot;, &quot;GIẢI ĐẶC BIỆT&quot;, 1, 6, 6000L)&#10;    )&#10;&#10;    init {&#10;        observeSettingsChanges()&#10;    }&#10;&#10;    private fun observeSettingsChanges() {&#10;        settingsManager.isSoundEnabled&#10;            .onEach { soundEnabled -&gt;&#10;                if (!soundEnabled) {&#10;                    soundManager.stop()&#10;                }&#10;            }.launchIn(viewModelScope)&#10;&#10;        settingsManager.isVibrationEnabled&#10;            .onEach { vibrationEnabled -&gt;&#10;                if (!vibrationEnabled) {&#10;                    soundManager.cancelVibration()&#10;                }&#10;            }.launchIn(viewModelScope)&#10;&#10;        settingsManager.resetSignal&#10;            .onEach { shouldReset -&gt;&#10;                if (shouldReset) {&#10;                    resetLottery()&#10;                    settingsManager.clearResetSignal()&#10;                }&#10;            }.launchIn(viewModelScope)&#10;    }&#10;&#10;    fun startLottery(withAnimation: Boolean = true) {&#10;        val currentState = _uiState.value&#10;        if (currentState.isCompleted || currentState.completedSession != null) {&#10;            resetLottery()&#10;        }&#10;&#10;        if (_uiState.value.isRunning || _uiState.value.isRolling) {&#10;            return // Prevent multiple starts&#10;        }&#10;&#10;        // Reset trạng thái cho phiên mới&#10;        currentSessionId = UUID.randomUUID().toString()&#10;        pausedAtPrizeIndex = 0&#10;&#10;        startLotteryFromIndex(0, withAnimation, emptyMap())&#10;    }&#10;&#10;    private fun startLotteryFromIndex(&#10;        startIndex: Int,&#10;        withAnimation: Boolean = true,&#10;        existingResults: Map&lt;String, LotteryResult&gt; = emptyMap()&#10;    ) {&#10;        currentLotteryJob?.cancel()&#10;&#10;        currentLotteryJob = viewModelScope.launch {&#10;            _uiState.update {&#10;                it.copy(&#10;                    isRunning = true,&#10;                    isPaused = false,&#10;                    currentPrizeIndex = startIndex,&#10;                    remainingPrizes = prizes.drop(startIndex),&#10;                    results = existingResults,&#10;                    completedSession = null&#10;                )&#10;            }&#10;&#10;            runLotterySession(&#10;                prizes = prizes,&#10;                withAnimation = withAnimation,&#10;                startFromIndex = startIndex,&#10;                existingResults = existingResults,&#10;                sessionId = currentSessionId&#10;            ).collect { event -&gt;&#10;                when (event) {&#10;                    is RunLotterySessionUseCase.LotteryEvent.Starting -&gt; {&#10;                        // Cập nhật index hiện tại&#10;                        val currentIndex = prizes.indexOfFirst { it.id == event.prize.id }&#10;                        pausedAtPrizeIndex = currentIndex&#10;&#10;                        _uiState.update {&#10;                            it.copy(&#10;                                currentPrize = event.prize,&#10;                                isRolling = true,&#10;                                currentPrizeIndex = currentIndex&#10;                            )&#10;                        }&#10;&#10;                        if (!_uiState.value.isPaused) {&#10;                            if (event.prize.id == &quot;special&quot;) {&#10;                                soundManager.play(SoundManager.SoundEffect.DRUM_ROLL)&#10;                                // Rung nhẹ khi bắt đầu giải đặc biệt&#10;                                soundManager.vibrateShort()&#10;                            } else {&#10;                                soundManager.play(SoundManager.SoundEffect.BALL_SPIN)&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    is RunLotterySessionUseCase.LotteryEvent.Rolling -&gt; {&#10;                        if (!_uiState.value.isPaused) {&#10;                            _uiState.update {&#10;                                it.copy(rollingProgress = event.progress)&#10;                            }&#10;&#10;                            if (event.progress &gt; 0.8f) {&#10;                                soundManager.play(SoundManager.SoundEffect.TICK)&#10;                                if (event.progress &gt; 0.95f) {&#10;                                    soundManager.vibrateShort()&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    is RunLotterySessionUseCase.LotteryEvent.Completed -&gt; {&#10;                        _uiState.update { state -&gt;&#10;                            state.copy(&#10;                                results = state.results + (event.result.prize.id to event.result),&#10;                                isRolling = false,&#10;                                rollingProgress = 0f&#10;                            )&#10;                        }&#10;&#10;                        if (!_uiState.value.isPaused) {&#10;                            soundManager.stop()&#10;                            soundManager.play(SoundManager.SoundEffect.BALL_DROP)&#10;&#10;                            if (event.result.prize.id == &quot;special&quot;) {&#10;                                soundManager.play(SoundManager.SoundEffect.WIN_FANFARE)&#10;                                soundManager.vibrateSpecialWin()&#10;                            } else {&#10;                                soundManager.vibrateSuccess()&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    is RunLotterySessionUseCase.LotteryEvent.SessionCompleted -&gt; {&#10;                        _uiState.update {&#10;                            it.copy(&#10;                                isRunning = false,&#10;                                isPaused = false,&#10;                                currentPrize = null,&#10;                                completedSession = event.session,&#10;                                currentPrizeIndex = 0,&#10;                                remainingPrizes = emptyList(),&#10;                                isRolling = false,&#10;                                rollingProgress = 0f&#10;                            )&#10;                        }&#10;&#10;                        soundManager.vibrateLong()&#10;&#10;                        currentSessionId = null&#10;                        pausedAtPrizeIndex = 0&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    fun pauseLottery() {&#10;        _uiState.update { it.copy(isPaused = true) }&#10;        soundManager.stop()&#10;        currentLotteryJob?.cancel()&#10;    }&#10;&#10;    //  Enhanced method để pause khi đang xem kết quả&#10;    fun pauseForViewingResults() {&#10;        // Cancel current lottery job immediately&#10;        currentLotteryJob?.cancel()&#10;&#10;        // Stop all sounds&#10;        soundManager.stop()&#10;        soundManager.cancelVibration()&#10;&#10;        // Update state to paused&#10;        _uiState.update { it.copy(isPaused = true) }&#10;&#10;        println(&quot;DEBUG: Paused for viewing results - lottery stopped&quot;)&#10;    }&#10;&#10;    fun resumeLottery() {&#10;        if (!_uiState.value.isPaused) return&#10;&#10;        val currentState = _uiState.value&#10;&#10;        println(&quot;DEBUG: Resuming lottery from index $pausedAtPrizeIndex&quot;)&#10;&#10;        // Tiếp tục từ vị trí đã tạm dừng&#10;        startLotteryFromIndex(&#10;            startIndex = pausedAtPrizeIndex,&#10;            withAnimation = true,&#10;            existingResults = currentState.results&#10;        )&#10;    }&#10;&#10;    fun resetLottery() {&#10;        currentLotteryJob?.cancel()&#10;        soundManager.stop()&#10;&#10;        currentSessionId = null&#10;        pausedAtPrizeIndex = 0&#10;&#10;        _uiState.value = LotteryUiState(&#10;            isRunning = false,&#10;            currentPrize = null,&#10;            isRolling = false,&#10;            isPaused = false,&#10;            rollingProgress = 0f,&#10;            results = emptyMap(),&#10;            completedSession = null,&#10;            isLoading = false,&#10;            error = null,&#10;            currentPrizeIndex = 0,&#10;            remainingPrizes = emptyList()&#10;        )&#10;    }&#10;&#10;    fun resetForAppReset() {&#10;        resetLottery()&#10;        soundManager.reinitialize()&#10;        viewModelScope.launch {&#10;            settingsManager.refreshAllSettings()&#10;            _uiState.emit(LotteryUiState())&#10;            delay(100)&#10;            observeSettingsChanges()&#10;        }&#10;    }&#10;&#10;    override fun onCleared() {&#10;        super.onCleared()&#10;        currentLotteryJob?.cancel()&#10;        soundManager.release()&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.nhathuy.randomlucky.presentation.viewmodel&#10;&#10;import androidx.lifecycle.ViewModel&#10;import androidx.lifecycle.viewModelScope&#10;import com.nhathuy.randomlucky.data.sound.SettingManager&#10;import com.nhathuy.randomlucky.data.sound.SoundManager&#10;import com.nhathuy.randomlucky.domain.model.LotteryPrize&#10;import com.nhathuy.randomlucky.domain.model.LotteryResult&#10;import com.nhathuy.randomlucky.domain.repository.LotteryRepository&#10;import com.nhathuy.randomlucky.domain.usecase.RunLotterySessionUseCase&#10;import com.nhathuy.randomlucky.presentation.state.LotteryUiState&#10;import dagger.hilt.android.lifecycle.HiltViewModel&#10;import kotlinx.coroutines.Job&#10;import kotlinx.coroutines.delay&#10;import kotlinx.coroutines.flow.MutableStateFlow&#10;import kotlinx.coroutines.flow.StateFlow&#10;import kotlinx.coroutines.flow.asStateFlow&#10;import kotlinx.coroutines.flow.launchIn&#10;import kotlinx.coroutines.flow.onEach&#10;import kotlinx.coroutines.flow.update&#10;import kotlinx.coroutines.launch&#10;import java.util.UUID&#10;import javax.inject.Inject&#10;&#10;@HiltViewModel&#10;class LotteryViewModel @Inject constructor(&#10;    private val runLotterySession: RunLotterySessionUseCase,&#10;    private val soundManager: SoundManager,&#10;    private val settingsManager: SettingManager,&#10;    private val lotteryRepository: LotteryRepository&#10;) : ViewModel() {&#10;    private val _uiState = MutableStateFlow(LotteryUiState())&#10;    val uiState: StateFlow&lt;LotteryUiState&gt; = _uiState.asStateFlow()&#10;&#10;    val isSoundEnabled = settingsManager.isSoundEnabled&#10;    val isVibrationEnabled = settingsManager.isVibrationEnabled&#10;    val isDarkModeEnabled = settingsManager.isDarkModeEnabled&#10;&#10;    private var currentLotteryJob: Job? = null&#10;    private var currentSessionId: String? = null&#10;    private var pausedAtPrizeIndex: Int = 0&#10;&#10;    // ✅ Track current session to compare with repository&#10;    private val prizes = listOf(&#10;        LotteryPrize(&quot;eighth&quot;, &quot;Giải Tám&quot;, &quot;Giải Tám&quot;, 1, 2, 4000L),&#10;        LotteryPrize(&quot;seventh&quot;, &quot;Giải Bảy&quot;, &quot;Giải Bảy&quot;, 1, 3, 4500L),&#10;        LotteryPrize(&quot;sixth&quot;, &quot;Giải Sáu&quot;, &quot;Giải Sáu&quot;, 3, 4, 5500L),&#10;        LotteryPrize(&quot;fifth&quot;, &quot;Giải Năm&quot;, &quot;Giải Năm&quot;, 1, 4, 5000L),&#10;        LotteryPrize(&quot;fourth&quot;, &quot;Giải Tư&quot;, &quot;Giải Tư&quot;, 7, 5, 8000L),&#10;        LotteryPrize(&quot;third&quot;, &quot;Giải Ba&quot;, &quot;Giải Ba&quot;, 2, 5, 5500L),&#10;        LotteryPrize(&quot;second&quot;, &quot;Giải Hai&quot;, &quot;Giải Hai&quot;, 1, 5, 4500L),&#10;        LotteryPrize(&quot;first&quot;, &quot;Giải Nhất&quot;, &quot;Giải Nhất&quot;, 1, 5, 5000L),&#10;        LotteryPrize(&quot;special&quot;, &quot;Giải Đặc Biệt&quot;, &quot;GIẢI ĐẶC BIỆT&quot;, 1, 6, 6000L)&#10;    )&#10;&#10;    init {&#10;        observeSettingsChanges()&#10;    }&#10;&#10;    private fun observeSettingsChanges() {&#10;        settingsManager.isSoundEnabled&#10;            .onEach { soundEnabled -&gt;&#10;                if (!soundEnabled) {&#10;                    soundManager.stop()&#10;                }&#10;            }.launchIn(viewModelScope)&#10;&#10;        settingsManager.isVibrationEnabled&#10;            .onEach { vibrationEnabled -&gt;&#10;                if (!vibrationEnabled) {&#10;                    soundManager.cancelVibration()&#10;                }&#10;            }.launchIn(viewModelScope)&#10;&#10;        settingsManager.resetSignal&#10;            .onEach { shouldReset -&gt;&#10;                if (shouldReset) {&#10;                    resetLottery()&#10;                    settingsManager.clearResetSignal()&#10;                }&#10;            }.launchIn(viewModelScope)&#10;    }&#10;&#10;    fun startLottery(withAnimation: Boolean = true) {&#10;        val currentState = _uiState.value&#10;        if (currentState.isCompleted || currentState.completedSession != null) {&#10;            resetLottery()&#10;        }&#10;&#10;        if (_uiState.value.isRunning || _uiState.value.isRolling) {&#10;            return // Prevent multiple starts&#10;        }&#10;&#10;        // Reset trạng thái cho phiên mới&#10;        currentSessionId = UUID.randomUUID().toString()&#10;        pausedAtPrizeIndex = 0&#10;&#10;        startLotteryFromIndex(0, withAnimation, emptyMap())&#10;    }&#10;&#10;    private fun startLotteryFromIndex(&#10;        startIndex: Int,&#10;        withAnimation: Boolean = true,&#10;        existingResults: Map&lt;String, LotteryResult&gt; = emptyMap()&#10;    ) {&#10;        currentLotteryJob?.cancel()&#10;&#10;        currentLotteryJob = viewModelScope.launch {&#10;            _uiState.update {&#10;                it.copy(&#10;                    isRunning = true,&#10;                    isPaused = false,&#10;                    currentPrizeIndex = startIndex,&#10;                    remainingPrizes = prizes.drop(startIndex),&#10;                    results = existingResults,&#10;                    completedSession = null&#10;                )&#10;            }&#10;&#10;            runLotterySession(&#10;                prizes = prizes,&#10;                withAnimation = withAnimation,&#10;                startFromIndex = startIndex,&#10;                existingResults = existingResults,&#10;                sessionId = currentSessionId&#10;            ).collect { event -&gt;&#10;                when (event) {&#10;                    is RunLotterySessionUseCase.LotteryEvent.Starting -&gt; {&#10;                        // Cập nhật index hiện tại&#10;                        val currentIndex = prizes.indexOfFirst { it.id == event.prize.id }&#10;                        pausedAtPrizeIndex = currentIndex&#10;&#10;                        _uiState.update {&#10;                            it.copy(&#10;                                currentPrize = event.prize,&#10;                                isRolling = true,&#10;                                currentPrizeIndex = currentIndex&#10;                            )&#10;                        }&#10;&#10;                        if (!_uiState.value.isPaused) {&#10;                            if (event.prize.id == &quot;special&quot;) {&#10;                                soundManager.play(SoundManager.SoundEffect.DRUM_ROLL)&#10;                                // Rung nhẹ khi bắt đầu giải đặc biệt&#10;                                soundManager.vibrateShort()&#10;                            } else {&#10;                                soundManager.play(SoundManager.SoundEffect.BALL_SPIN)&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    is RunLotterySessionUseCase.LotteryEvent.Rolling -&gt; {&#10;                        if (!_uiState.value.isPaused) {&#10;                            _uiState.update {&#10;                                it.copy(rollingProgress = event.progress)&#10;                            }&#10;&#10;                            if (event.progress &gt; 0.8f) {&#10;                                soundManager.play(SoundManager.SoundEffect.TICK)&#10;                                if (event.progress &gt; 0.95f) {&#10;                                    soundManager.vibrateShort()&#10;                                }&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    is RunLotterySessionUseCase.LotteryEvent.Completed -&gt; {&#10;                        _uiState.update { state -&gt;&#10;                            state.copy(&#10;                                results = state.results + (event.result.prize.id to event.result),&#10;                                isRolling = false,&#10;                                rollingProgress = 0f&#10;                            )&#10;                        }&#10;&#10;                        if (!_uiState.value.isPaused) {&#10;                            soundManager.stop()&#10;                            soundManager.play(SoundManager.SoundEffect.BALL_DROP)&#10;&#10;                            if (event.result.prize.id == &quot;special&quot;) {&#10;                                soundManager.play(SoundManager.SoundEffect.WIN_FANFARE)&#10;                                soundManager.vibrateSpecialWin()&#10;                            } else {&#10;                                soundManager.vibrateSuccess()&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                    is RunLotterySessionUseCase.LotteryEvent.SessionCompleted -&gt; {&#10;                        _uiState.update {&#10;                            it.copy(&#10;                                isRunning = false,&#10;                                isPaused = false,&#10;                                currentPrize = null,&#10;                                completedSession = event.session,&#10;                                currentPrizeIndex = 0,&#10;                                remainingPrizes = emptyList(),&#10;                                isRolling = false,&#10;                                rollingProgress = 0f&#10;                            )&#10;                        }&#10;&#10;                        soundManager.vibrateLong()&#10;&#10;                        currentSessionId = null&#10;                        pausedAtPrizeIndex = 0&#10;                    }&#10;                }&#10;            }&#10;        }&#10;    }&#10;&#10;    fun pauseLottery() {&#10;        _uiState.update { it.copy(isPaused = true) }&#10;        soundManager.stop()&#10;        currentLotteryJob?.cancel()&#10;    }&#10;&#10;    //  Enhanced method để pause khi đang xem kết quả&#10;    fun pauseForViewingResults() {&#10;        // Cancel current lottery job immediately&#10;        currentLotteryJob?.cancel()&#10;&#10;        // Stop all sounds&#10;        soundManager.stop()&#10;        soundManager.cancelVibration()&#10;&#10;        // Update state to paused&#10;        _uiState.update { it.copy(isPaused = true) }&#10;&#10;        println(&quot;DEBUG: Paused for viewing results - lottery stopped&quot;)&#10;    }&#10;&#10;    fun resumeLottery() {&#10;        if (!_uiState.value.isPaused) return&#10;&#10;        val currentState = _uiState.value&#10;&#10;        println(&quot;DEBUG: Resuming lottery from index $pausedAtPrizeIndex&quot;)&#10;&#10;        // Tiếp tục từ vị trí đã tạm dừng&#10;        startLotteryFromIndex(&#10;            startIndex = pausedAtPrizeIndex,&#10;            withAnimation = true,&#10;            existingResults = currentState.results&#10;        )&#10;    }&#10;&#10;    fun resetLottery() {&#10;        currentLotteryJob?.cancel()&#10;        soundManager.stop()&#10;&#10;        currentSessionId = null&#10;        pausedAtPrizeIndex = 0&#10;&#10;        _uiState.value = LotteryUiState(&#10;            isRunning = false,&#10;            currentPrize = null,&#10;            isRolling = false,&#10;            isPaused = false,&#10;            rollingProgress = 0f,&#10;            results = emptyMap(),&#10;            completedSession = null,&#10;            isLoading = false,&#10;            error = null,&#10;            currentPrizeIndex = 0,&#10;            remainingPrizes = emptyList()&#10;        )&#10;        &#10;        println(&quot;DEBUG: LotteryViewModel reset completed&quot;)&#10;    }&#10;&#10;    fun resetForAppReset() {&#10;        resetLottery()&#10;        soundManager.reinitialize()&#10;        viewModelScope.launch {&#10;            settingsManager.refreshAllSettings()&#10;            _uiState.emit(LotteryUiState())&#10;            delay(100)&#10;            observeSettingsChanges()&#10;        }&#10;    }&#10;&#10;    override fun onCleared() {&#10;        super.onCleared()&#10;        currentLotteryJob?.cancel()&#10;        soundManager.release()&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>