package com.nhathuy.randomlucky.presentation.ui.screen

import android.content.ClipData
import android.content.ClipboardManager
import android.content.Context
import android.content.Intent
import android.net.Uri
import android.widget.Toast
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.hilt.navigation.compose.hiltViewModel
import com.nhathuy.randomlucky.R
import com.nhathuy.randomlucky.data.sound.SettingManager
import com.nhathuy.randomlucky.presentation.theme.*
import com.nhathuy.randomlucky.presentation.viewmodel.HistoryViewModel
import com.nhathuy.randomlucky.presentation.viewmodel.SettingsViewModel
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale
import androidx.core.content.edit
import com.nhathuy.randomlucky.presentation.viewmodel.LotteryViewModel
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun SettingsScreen(
    onNavigateBack: () -> Unit = {},
    historyViewModel: HistoryViewModel = hiltViewModel(),
    lotteryViewModel: LotteryViewModel = hiltViewModel(),
    settingsViewModel: SettingsViewModel = hiltViewModel(),
    settingsManager: SettingManager = hiltViewModel<SettingsViewModel>().settingsManager
) {
    val context = LocalContext.current

    var showAboutDialog by remember { mutableStateOf(false) }
    var showResetDialog by remember { mutableStateOf(false) }

    val soundEnabled by settingsManager.isSoundEnabled.collectAsState()
    val darkModeEnabled by settingsManager.isDarkModeEnabled.collectAsState()
    val vibrationEnabled by settingsManager.isVibrationEnabled.collectAsState()

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(
                brush = Brush.verticalGradient(
                    colors = listOf(
                        Color(0xFF0F0F23),
                        Color(0xFF1A1A2E),
                        Color(0xFF16213E),
                        Color(0xFF0F0F23)
                    )
                )
            )
    ) {
        Column(
            modifier = Modifier.fillMaxSize()
        ) {
            // Enhanced Header
            TopAppBar(
                title = {
                    Row(
                        verticalAlignment = Alignment.CenterVertically,
                        horizontalArrangement = Arrangement.spacedBy(12.dp)
                    ) {
                        Spacer(modifier = Modifier.width(5.dp))
                        Text(
                            text = "C√†i ƒë·∫∑t",
                            fontSize = 20.sp,
                            fontWeight = FontWeight.Bold,
                            color = Color.White
                        )
                    }
                },
                navigationIcon = {
                    IconButton(
                        onClick = onNavigateBack,
                        modifier = Modifier
                            .clip(RoundedCornerShape(10.dp))
                            .background(Color.White.copy(alpha = 0.1f))
                    ) {
                        Icon(
                            imageVector = Icons.Default.ArrowBack,
                            contentDescription = "Quay l·∫°i",
                            tint = Color.White,
                            modifier = Modifier.size(16.dp)
                        )
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = Color.Transparent
                ),
                modifier = Modifier.padding(horizontal = 8.dp, vertical = 8.dp)
            )

            // Content v·ªõi spacing ƒë·∫πp h∆°n
            LazyColumn(
                modifier = Modifier
                    .fillMaxSize()
                    .padding(horizontal = 20.dp),
                verticalArrangement = Arrangement.spacedBy(20.dp)
            ) {
                // Game Settings v·ªõi gradient card
                item {
                    SettingsSection(
                        title = "üéÆ C√†i ƒë·∫∑t tr√≤ ch∆°i",
                        gradient = Brush.horizontalGradient(
                            colors = listOf(
                                LotteryDarkBlue.copy(alpha = 0.3f),
                                LotteryPurple.copy(alpha = 0.2f)
                            )
                        )
                    ) {
                        SettingsSwitchItem(
                            title = "√Çm thanh",
                            description = "B·∫≠t/t·∫Øt hi·ªáu ·ª©ng √¢m thanh trong game",
                            icon = if (soundEnabled) Icons.Default.VolumeUp else Icons.Default.VolumeOff,
                            checked = soundEnabled,
                            onCheckedChange = { newValue ->
                                // ‚úÖ Update settings through SettingsManager
                                settingsManager.setSoundEnabled(newValue)

//                                Toast.makeText(
//                                    context,
//                                    if (newValue) "üîä √Çm thanh ƒë√£ ƒë∆∞·ª£c b·∫≠t" else "üîá √Çm thanh ƒë√£ ƒë∆∞·ª£c t·∫Øt",
//                                    Toast.LENGTH_SHORT
//                                ).show()
                            }
                        )

                        Divider(
                            color = Color.White.copy(alpha = 0.1f),
                            thickness = 0.5.dp,
                            modifier = Modifier.padding(vertical = 12.dp)
                        )

                        SettingsSwitchItem(
                            title = "Rung",
                            description = "B·∫≠t/t·∫Øt rung khi c√≥ k·∫øt qu·∫£",
                            icon = if (vibrationEnabled) Icons.Default.Vibration else Icons.Default.PhoneAndroid,
                            checked = vibrationEnabled,
                            onCheckedChange = { newValue ->
                                settingsManager.setVibrationEnabled(newValue)

//                                // Test vibration when enabling
//                                if (newValue) {
//                                    settingsViewModel.toggleVibration()
//                                }
                            }
                        )

//                        Divider(
//                            color = Color.White.copy(alpha = 0.1f),
//                            thickness = 0.5.dp,
//                            modifier = Modifier.padding(vertical = 12.dp)
//                        )
//
//                        SettingsSwitchItem(
//                            title = "Ch·∫ø ƒë·ªô t·ªëi",
//                            description = "S·ª≠ d·ª•ng giao di·ªán t·ªëi cho ·ª©ng d·ª•ng",
//                            icon = if (darkModeEnabled) Icons.Default.DarkMode else Icons.Default.LightMode,
//                            checked = darkModeEnabled,
//                            onCheckedChange = { newValue ->
//                                // ‚úÖ Update settings through SettingsManager
//                                settingsManager.setDarkModeEnabled(newValue)
//
////                                Toast.makeText(
////                                    context,
////                                    if (newValue) "üåô Ch·∫ø ƒë·ªô t·ªëi ƒë√£ ƒë∆∞·ª£c b·∫≠t" else "‚òÄÔ∏è Ch·∫ø ƒë·ªô s√°ng ƒë√£ ƒë∆∞·ª£c b·∫≠t",
////                                    Toast.LENGTH_SHORT
////                                ).show()
//                            }
//                        )

                        Divider(
                            color = Color.White.copy(alpha = 0.1f),
                            thickness = 0.5.dp,
                            modifier = Modifier.padding(vertical = 12.dp)
                        )

                        SettingsClickableItem(
                            title = "ƒê·∫∑t l·∫°i ·ª©ng d·ª•ng",
                            description = "X√≥a t·∫•t c·∫£ d·ªØ li·ªáu v√† c√†i ƒë·∫∑t",
                            icon = Icons.Default.RestartAlt,
                            onClick = { showResetDialog = true },
                            iconTint = LotteryRed
                        )
                    }
                }

                // App Info & Support v·ªõi gradient kh√°c
                item {
                    SettingsSection(
                        title = "‚ÑπÔ∏è Th√¥ng tin & h·ªó tr·ª£",
                        gradient = Brush.horizontalGradient(
                            colors = listOf(
                                LotteryGreen.copy(alpha = 0.3f),
                                LotteryOrange.copy(alpha = 0.2f)
                            )
                        )
                    ) {
                        SettingsClickableItem(
                            title = "V·ªÅ ·ª©ng d·ª•ng",
                            description = "Th√¥ng tin chi ti·∫øt v·ªÅ Random Lucky v1.0.0",
                            icon = Icons.Default.Info,
                            onClick = { showAboutDialog = true },
                            iconTint = LotteryLightBlue
                        )

                        Divider(
                            color = Color.White.copy(alpha = 0.1f),
                            thickness = 0.5.dp,
                            modifier = Modifier.padding(vertical = 12.dp)
                        )

                        SettingsClickableItem(
                            title = "ƒê√°nh gi√° ·ª©ng d·ª•ng",
                            description = "ƒê√°nh gi√° 5 sao tr√™n Google Play Store",
                            icon = Icons.Default.Star,
                            onClick = { handleRateApp(context) },
                            iconTint = LotteryGold
                        )

                        Divider(
                            color = Color.White.copy(alpha = 0.1f),
                            thickness = 0.5.dp,
                            modifier = Modifier.padding(vertical = 12.dp)
                        )

                        SettingsClickableItem(
                            title = "Chia s·∫ª ·ª©ng d·ª•ng",
                            description = "Gi·ªõi thi·ªáu Random Lucky v·ªõi b·∫°n b√®",
                            icon = Icons.Default.Share,
                            onClick = { handleShareApp(context) },
                            iconTint = LotteryGreen
                        )

                        Divider(
                            color = Color.White.copy(alpha = 0.1f),
                            thickness = 0.5.dp,
                            modifier = Modifier.padding(vertical = 12.dp)
                        )

                        SettingsClickableItem(
                            title = "Li√™n h·ªá h·ªó tr·ª£",
                            description = "G·ª≠i ph·∫£n h·ªìi v√† b√°o l·ªói cho nh√† ph√°t tri·ªÉn",
                            icon = Icons.Default.Email,
                            onClick = { handleContactSupport(context) },
                            iconTint = LotteryPurple
                        )
                    }
                }

                // Bottom spacing
                item {
                    Spacer(modifier = Modifier.height(100.dp))
                }
            }
        }
    }

    // Enhanced Dialogs
    if (showAboutDialog) {
        AboutDialog(onDismiss = { showAboutDialog = false })
    }

    if (showResetDialog) {
        ResetConfirmationDialog(
            onConfirm = {
                handleResetApp(context, historyViewModel, lotteryViewModel, settingsManager)
                showResetDialog = false
            },
            onDismiss = { showResetDialog = false }
        )
    }
}

// xu ly danh gia ung dung
private fun handleRateApp(context: Context) {
    try {
        // Try to open Play Store app first
        val playStoreIntent = Intent(Intent.ACTION_VIEW).apply {
            data = Uri.parse("market://details?id=${context.packageName}")
            setPackage("com.android.vending")
        }

        if (playStoreIntent.resolveActivity(context.packageManager) != null) {
            context.startActivity(playStoreIntent)
        } else {
            // Fallback to web browser
            val webIntent = Intent(Intent.ACTION_VIEW).apply {
                data =
                    Uri.parse("https://play.google.com/store/apps/details?id=${context.packageName}")
            }
            context.startActivity(webIntent)
        }
    } catch (e: Exception) {
        Toast.makeText(context, "Kh√¥ng th·ªÉ m·ªü Play Store", Toast.LENGTH_SHORT).show()
    }
}

// x·ª≠ l√Ω ƒë√°nh gi√° ·ª©ng d·ª•ng
private fun handleShareApp(context: Context) {
    val shareText = """
        üé≤ Random Lucky - ·ª®ng d·ª•ng x·ªï s·ªë may m·∫Øn h√†ng ƒë·∫ßu vi·ªát nam! üé≤
        
        üåü T√≠nh nƒÉng n·ªïi b·∫≠t:
        ‚Ä¢ X·ªï s·ªë ng·∫´u nhi√™n v·ªõi nhi·ªÅu gi·∫£i th∆∞·ªüng
        ‚Ä¢ Giao di·ªán ƒë·∫πp m·∫Øt v√† d·ªÖ s·ª≠ d·ª•ng
        ‚Ä¢ L∆∞u l·ªãch s·ª≠ k·∫øt qu·∫£ chi ti·∫øt
        ‚Ä¢ Ho√†n to√†n mi·ªÖn ph√≠
        
        üì± T·∫£i ngay t·∫°i: https://play.google.com/store/apps/details?id=${context.packageName}
        
        #RandomLucky #XoSo #MayMan #TravisHuy
    """.trimIndent()

    val shareIntent = Intent().apply {
        action = Intent.ACTION_SEND
        type = "text/plain"
        putExtra(Intent.EXTRA_TEXT, shareText)
        putExtra(Intent.EXTRA_SUBJECT, "üé≤ Random Lucky - ·ª®ng d·ª•ng x·ªï s·ªë may m·∫Øn!")
    }
    try {
        context.startActivity(
            Intent.createChooser(
                shareIntent,
                "Chia s·∫ª Random Lucky - X·ªï S·ªë May M·∫Øn"
            )
        )
    } catch (e: Exception) {
        Toast.makeText(context, "Kh√¥ng th·ªÉ chia s·∫ª", Toast.LENGTH_SHORT).show()
    }
}

private fun handleResetApp(
    context: Context,
    historyViewModel: HistoryViewModel,
    lotteryViewModel: LotteryViewModel,
    settingsManager: SettingManager
) {
    CoroutineScope(Dispatchers.Main).launch {
        try {
            // 1. Reset lottery tr∆∞·ªõc
            lotteryViewModel.resetForAppReset()

            // 2. Clear history
            historyViewModel.clearAllHistory()

            // 3. Reset settings v·ªÅ default values (kh√¥ng ch·ªâ clear)
            settingsManager.resetToDefaults()

            // 4. Clear c√°c shared preferences kh√°c
            val sharedPrefs = context.getSharedPreferences("app_preferences", Context.MODE_PRIVATE)
            sharedPrefs.edit {
                clear()
                apply()
            }

            // 5. Clear cache
            try {
                val cacheDir = context.cacheDir
                cacheDir.deleteRecursively()
            } catch (e: Exception) {
                // Ignore cache clear errors
            }

            // 6. ƒê·ª£i ƒë·ªÉ ƒë·∫£m b·∫£o t·∫•t c·∫£ operations ho√†n th√†nh
            delay(500)

            Toast.makeText(
                context,
                "ƒê√£ ƒë·∫∑t l·∫°i ·ª©ng d·ª•ng th√†nh c√¥ng!\nT·∫•t c·∫£ d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c x√≥a.\"",
                Toast.LENGTH_LONG
            ).show()

        } catch (e: Exception) {
            Toast.makeText(
                context,
                "C√≥ l·ªói x·∫£y ra khi ƒë·∫∑t l·∫°i: ${e.message}",
                Toast.LENGTH_LONG
            ).show()
        }
    }
}

private fun handleContactSupport(context: Context) {
    val supportEmail = context.getString(R.string.email_dev)
    val subject = context.getString(R.string.email_subject)
    val body = """
        Xin ch√†o TravisHuy,

        T√¥i mu·ªën g·ª≠i ph·∫£n h·ªìi v·ªÅ ·ª©ng d·ª•ng Random Lucky - X·ªï S·ªë May M·∫Øn:

        üì± Th√¥ng tin thi·∫øt b·ªã:
        ‚Ä¢ Phi√™n b·∫£n app: 1.0.0
        ‚Ä¢ H·ªá ƒëi·ªÅu h√†nh:   Android ${android.os.Build.VERSION.RELEASE}
        ‚Ä¢ Th·ªùi gian: ${SimpleDateFormat("dd/MM/yyyy HH:mm:ss", Locale.getDefault()).format(Date())}

         üí¨ N·ªôi dung ph·∫£n h·ªìi:
        [Vui l√≤ng vi·∫øt ph·∫£n h·ªìi c·ªßa b·∫°n ·ªü ƒë√¢y]

        C·∫£m ∆°n b·∫°n ƒë√£ ph√°t tri·ªÉn ·ª©ng d·ª•ng tuy·ªát v·ªùi n√†y!

        Tr√¢n tr·ªçng,
        Ng∆∞·ªùi d√πng Random Lucky
    """.trimIndent()

    try {
        val emailIntent = Intent(Intent.ACTION_SEND).apply {
            type = "message/rfc822" // Ch·ªâ ƒë·ªãnh lo·∫°i email
            putExtra(Intent.EXTRA_EMAIL, arrayOf(supportEmail))
            putExtra(Intent.EXTRA_SUBJECT, subject)
            putExtra(Intent.EXTRA_TEXT, body)
        }

        // Ki·ªÉm tra xem c√≥ ·ª©ng d·ª•ng email n√†o kh√¥ng
        if (emailIntent.resolveActivity(context.packageManager) != null) {
            context.startActivity(Intent.createChooser(emailIntent, "Ch·ªçn ·ª©ng d·ª•ng email"))
            return
        }
    } catch (e: Exception) {
        // Log l·ªói ƒë·ªÉ debug
        android.util.Log.e("EmailError", "ACTION_SEND failed: ${e.message}")
    }
}
private fun copyToClipboard(context: Context, email: String) {
    val clipboard = context.getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager
    clipboard.setPrimaryClip(ClipData.newPlainText("Email", email))

    Toast.makeText(
        context,
        "üìß ƒê√£ copy email: $email",
        Toast.LENGTH_SHORT
    ).show()
}

@Composable
private fun SettingsSection(
    title: String,
    gradient: Brush,
    content: @Composable ColumnScope.() -> Unit
) {
    Card(
        modifier = Modifier.fillMaxWidth(),
        shape = RoundedCornerShape(20.dp),
        colors = CardDefaults.cardColors(
            containerColor = Color.Transparent
        ),
        elevation = CardDefaults.cardElevation(defaultElevation = 8.dp)
    ) {
        Box(
            modifier = Modifier
                .fillMaxWidth()
                .background(gradient)
                .background(Color(0xFF1E1E2E).copy(alpha = 0.8f))
        ) {
            Column(
                modifier = Modifier.padding(24.dp)
            ) {
                Text(
                    text = title,
                    fontSize = 18.sp,
                    fontWeight = FontWeight.Bold,
                    color = LotteryGold,
                    modifier = Modifier.padding(bottom = 20.dp)
                )
                content()
            }
        }
    }
}

@Composable
private fun SettingsSwitchItem(
    title: String,
    description: String,
    icon: ImageVector,
    checked: Boolean,
    onCheckedChange: (Boolean) -> Unit
) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 8.dp),
        verticalAlignment = Alignment.CenterVertically,
        horizontalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        Box(
            modifier = Modifier
                .size(48.dp)
                .clip(RoundedCornerShape(12.dp))
                .background(
                    if (checked) LotteryGold.copy(alpha = 0.2f)
                    else Color.White.copy(alpha = 0.1f)
                ),
            contentAlignment = Alignment.Center
        ) {
            Icon(
                imageVector = icon,
                contentDescription = null,
                tint = if (checked) LotteryGold else Color.White.copy(alpha = 0.7f),
                modifier = Modifier.size(24.dp)
            )
        }

        Column(
            modifier = Modifier.weight(1f)
        ) {
            Text(
                text = title,
                fontSize = 17.sp,
                fontWeight = FontWeight.SemiBold,
                color = Color.White
            )
            Text(
                text = description,
                fontSize = 14.sp,
                color = Color.White.copy(alpha = 0.7f),
                lineHeight = 18.sp
            )
        }

        Switch(
            checked = checked,
            onCheckedChange = onCheckedChange,
            colors = SwitchDefaults.colors(
                checkedThumbColor = Color.White,
                checkedTrackColor = LotteryGold,
                uncheckedThumbColor = Color.White.copy(alpha = 0.8f),
                uncheckedTrackColor = Color.White.copy(alpha = 0.3f)
            )
        )
    }
}

@Composable
private fun SettingsClickableItem(
    title: String,
    description: String,
    icon: ImageVector,
    onClick: () -> Unit,
    iconTint: Color = LotteryGold
) {
    Surface(
        modifier = Modifier.fillMaxWidth(),
        onClick = onClick,
        color = Color.Transparent,
        shape = RoundedCornerShape(16.dp)
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(vertical = 8.dp),
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            Box(
                modifier = Modifier
                    .size(48.dp)
                    .clip(RoundedCornerShape(12.dp))
                    .background(iconTint.copy(alpha = 0.2f)),
                contentAlignment = Alignment.Center
            ) {
                Icon(
                    imageVector = icon,
                    contentDescription = null,
                    tint = iconTint,
                    modifier = Modifier.size(24.dp)
                )
            }

            Column(
                modifier = Modifier.weight(1f)
            ) {
                Text(
                    text = title,
                    fontSize = 17.sp,
                    fontWeight = FontWeight.SemiBold,
                    color = Color.White
                )
                Text(
                    text = description,
                    fontSize = 14.sp,
                    color = Color.White.copy(alpha = 0.7f),
                    lineHeight = 18.sp
                )
            }

            Icon(
                imageVector = Icons.Default.ChevronRight,
                contentDescription = null,
                tint = Color.White.copy(alpha = 0.5f),
                modifier = Modifier.size(20.dp)
            )
        }
    }
}

@Composable
private fun AboutDialog(onDismiss: () -> Unit) {
    AlertDialog(
        onDismissRequest = onDismiss,
        title = {
            Column(
                horizontalAlignment = Alignment.CenterHorizontally,
                modifier = Modifier.fillMaxWidth()
            ) {
                Box(
                    modifier = Modifier
                        .size(80.dp)
                        .clip(RoundedCornerShape(20.dp))
                        .background(
                            Brush.radialGradient(
                                colors = listOf(
                                    LotteryGold.copy(alpha = 0.3f),
                                    LotteryGold.copy(alpha = 0.1f)
                                )
                            )
                        ),
                    contentAlignment = Alignment.Center
                ) {
                    Icon(
                        imageVector = Icons.Default.EmojiEvents,
                        contentDescription = null,
                        tint = LotteryGold,
                        modifier = Modifier.size(48.dp)
                    )
                }
                Spacer(modifier = Modifier.height(16.dp))
                Text(
                    text = "Random Lucky",
                    fontSize = 24.sp,
                    fontWeight = FontWeight.Bold,
                    color = LotteryGold
                )
            }
        },
        text = {
            Column {
                Text(
                    text = "·ª®ng d·ª•ng x·ªï s·ªë may m·∫Øn h√†ng ƒë·∫ßu Vi·ªát Nam",
                    fontSize = 16.sp,
                    fontWeight = FontWeight.Medium,
                    textAlign = TextAlign.Center,
                    modifier = Modifier.fillMaxWidth(),
                    color = Color.Gray
                )

                Spacer(modifier = Modifier.height(24.dp))

                InfoRow("Phi√™n b·∫£n", "1.0.0", LotteryLightBlue)
                InfoRow("Nh√† ph√°t tri·ªÉn", "TravisHuy", LotteryGreen)
                InfoRow("Ng√†y ph√°t h√†nh", "02/08/2025", LotteryPurple)
                InfoRow("N·ªÅn t·∫£ng", "Android", LotteryOrange)

                Spacer(modifier = Modifier.height(24.dp))

                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .clip(RoundedCornerShape(12.dp))
                        .background(LotteryGold.copy(alpha = 0.1f))
                        .padding(16.dp)
                ) {
                    Text(
                        text = "üéâ C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng v√† s·ª≠ d·ª•ng Random Lucky!",
                        fontSize = 14.sp,
                        textAlign = TextAlign.Center,
                        modifier = Modifier.fillMaxWidth(),
                        color = LotteryGold,
                        fontWeight = FontWeight.Medium
                    )
                }
            }
        },
        confirmButton = {
            TextButton(
                onClick = onDismiss,
                colors = ButtonDefaults.textButtonColors(
                    contentColor = LotteryGold
                )
            ) {
                Text(
                    "ƒê√≥ng",
                    fontWeight = FontWeight.SemiBold
                )
            }
        },
        containerColor = Color(0xFF1E1E2E),
        shape = RoundedCornerShape(20.dp)
    )
}

@Composable
private fun InfoRow(label: String, value: String, color: Color = LotteryGold) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 6.dp),
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically
    ) {
        Text(
            text = label,
            fontSize = 15.sp,
            color = Color.Gray,
            fontWeight = FontWeight.Medium
        )
        Text(
            text = value,
            fontSize = 15.sp,
            fontWeight = FontWeight.SemiBold,
            color = color
        )
    }
}

@Composable
private fun ResetConfirmationDialog(
    onConfirm: () -> Unit,
    onDismiss: () -> Unit
) {
    AlertDialog(
        onDismissRequest = onDismiss,
        icon = {
            Box(
                modifier = Modifier
                    .size(60.dp)
                    .clip(RoundedCornerShape(16.dp))
                    .background(LotteryRed.copy(alpha = 0.2f)),
                contentAlignment = Alignment.Center
            ) {
                Icon(
                    imageVector = Icons.Default.Warning,
                    contentDescription = null,
                    tint = LotteryRed,
                    modifier = Modifier.size(32.dp)
                )
            }
        },
        title = {
            Text(
                "‚ö†Ô∏è ƒê·∫∑t l·∫°i ·ª©ng d·ª•ng",
                fontSize = 20.sp,
                fontWeight = FontWeight.Bold,
                textAlign = TextAlign.Center,
                modifier = Modifier.fillMaxWidth()
            )
        },
        text = {
            Column {
                Text(
                    "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒë·∫∑t l·∫°i ·ª©ng d·ª•ng kh√¥ng?",
                    fontSize = 16.sp,
                    fontWeight = FontWeight.Medium,
                    textAlign = TextAlign.Center,
                    modifier = Modifier.fillMaxWidth()
                )

                Spacer(modifier = Modifier.height(12.dp))

                Box(
                    modifier = Modifier
                        .fillMaxWidth()
                        .clip(RoundedCornerShape(12.dp))
                        .background(LotteryRed.copy(alpha = 0.1f))
                        .padding(16.dp)
                ) {
                    Text(
                        "T·∫•t c·∫£ d·ªØ li·ªáu bao g·ªìm l·ªãch s·ª≠ x·ªï s·ªë v√† c√†i ƒë·∫∑t s·∫Ω b·ªã x√≥a vƒ©nh vi·ªÖn. H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.",
                        fontSize = 14.sp,
                        textAlign = TextAlign.Center,
                        color = LotteryRed,
                        modifier = Modifier.fillMaxWidth()
                    )
                }
            }
        },
        confirmButton = {
            Button(
                onClick = onConfirm,
                colors = ButtonDefaults.buttonColors(
                    containerColor = LotteryRed,
                    contentColor = Color.White
                ),
                shape = RoundedCornerShape(12.dp)
            ) {
                Text(
                    "ƒê·∫∑t l·∫°i",
                    fontWeight = FontWeight.Bold
                )
            }
        },
        dismissButton = {
            OutlinedButton(
                onClick = onDismiss,
                colors = ButtonDefaults.outlinedButtonColors(
                    contentColor = Color.Gray
                ),
                shape = RoundedCornerShape(12.dp)
            ) {
                Text(
                    "H·ªßy",
                    fontWeight = FontWeight.Medium
                )
            }
        },
        containerColor = Color(0xFFE3E2E2),
        shape = RoundedCornerShape(20.dp)
    )
}
